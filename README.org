#+TITLE: dot-emacs
#+DATE: Sunday, Jan 17 2016
#+DESCRIPTION: my emacs config!
#+AUTHOR: rho
#+OPTIONS: num:t
#+STARTUP: overview

*DISCLAIMER:* :warning: AUTHOR will _not_ be _responsible_ for
the :fire: _harm_ :fire: cause by using this config :bangbang:

Its unlikely to harm,

but :dizzy_face: *MAKE SURE YOU HAVE THE BACKUP* :monkey:

*NOTE*: Some section are in testing need manually intervention,
it doesn't work out of the box.

* Intro

  I've been using /emacs/ since *2012*, It has been the love and hate
  story since day one, In summary *emacs rocks but rocks are not so
  pretty*, and here you are looking at not so *pretty* side.


  #+BEGIN_EXAMPLE
    FYI "emacs vanilla is a lie"
  #+END_EXAMPLE

  It began with *single-file* =~/.emacs= with some random snippets
  from web. It soon grew into huge of /tweaks/ and /hacks/, with some
  /scripts/ of my own. The frequency of changes and roll-backs were so
  high it was'nt long *emacs* couldn't fit beside my other [[https://github.com/rhoit/my-config][config]].
  And *emacs* got its own *.git* repository, soon bulky *single-file*
  ran config was broken down into separate modules with long list of
  *cherry-picked* plugin with their own repository and version
  controls. There was even the time I used *system package manager* to
  manage them but it was too much work.

  Its difficult to maintain config, I have added and removed the
  packages over and over again and I still do. There have been times,
  when I just froze the update until its not supported by system. The
  major problem was the unmaintainability of these plugin versions
  each time I updated something. I didn't knew about =package.el=
  existance until it was listed in [[https://www.gnu.org/software/emacs/manual/html_node/efaq/New-in-Emacs-24.html][What's new in emacs24]].

  Thankfully the =el-get= was there with the familiarity =apt-get=,
  which could not only make the life easier but also discover new
  packages. This config is mostly based on =el-get= and with few
  =ELPA= and =MELPA=. After few outlandish rodeos, this has been the
  most sane approach I found, to convert [[https://github.com/rhoit/dot-emacs/blob/master/init.el][~/emacs.d/init.el]] =org= file,
  which made verbose easy to handle.

  #+ATTR_HTML: title="screenshot"
  [[https://www.google.com][file:https://raw.githubusercontent.com/rhoit/dot-emacs/dump/screenshot/screenshot02.png]]

** getting it

   #+BEGIN_EXAMPLE
     $ git clone https://github.com/rhoit/dot-emacs /path/to/dot-emacs
   #+END_EXAMPLE

** how to build

   =configure= :construction_worker: , pulls down the [[https://github.com/dimitri/el-get][el-get]], and
   stuffs.

   #+BEGIN_SRC bash
     $ ./configure
     $ make
     $ make install
   #+END_SRC

** structure

   #+BEGIN_EXAMPLE
     dot-emacs
     ├── el-get                 # pacman
     ├── config                 # config subsection
     │   ├── compile.cfg.el
     :   :
     │   └── tabbar.cfg.el
     ├── ...
     :
     ├── 00testing              # testing stuffs
     └── snippets               # yasnippet stuffs
         ├── fundamental-mode
         :
         └── python-mode
   #+END_EXAMPLE

* emacs core

** benchmarking

   install benchmark-init from el-get and put below code top of your
   config.

   #+BEGIN_SRC emacs-lisp
     ;;(let ((benchmark-init.el "~/.emacs.d/el-get/benchmark-init/benchmark-init.el"))
     ;; (when (file-exists-p benchmark-init.el)
     ;;    (load benchmark-init.el)))
   #+END_SRC

   then once your emacs started, run:

   =M-x benchmark-init/show-durations-tree=

   To check your package load time do
   #+BEGIN_EXAMPLE
     M-x emacs-init-time
   #+END_EXAMPLE

** emacs garbage collector

   based on [[https://www.reddit.com/r/emacs/comments/3kqt6e/2_easy_little_known_steps_to_speed_up_emacs_start/][reddit]] post.

   I hoped this works but, haven't seen much difference, but if chrome
   just eats entire 4 GB of RAM :rage1: for no reason why not emacs,
   FYI your java based IDE will just eat up more than *200 Mb* to
   start.

   #+BEGIN_SRC emacs-lisp
     (setq gc-cons-threshold 209715200)
   #+END_SRC

** emacs server

   Stop :no_entry_sign: opening *emacs* for each file. Set default open
   application using =emacsclient -n -a=emacs [FILE]=.

   #+begin_src emacs-lisp
     (require 'server)
     (unless (server-running-p)
       (server-start))
   #+end_src

** encoding

   #+begin_src emacs-lisp
     (setq locale-coding-system 'utf-8)
     (set-language-environment 'utf-8)
     (set-terminal-coding-system 'utf-8)
     (set-keyboard-coding-system 'utf-8)
     (set-selection-coding-system 'utf-8)
     (prefer-coding-system 'utf-8)
   #+end_src

** backup

   #+begin_src emacs-lisp
     (setq backup-directory-alist (quote ((".*" . "~/.cache/emacs_backup/"))))
     (setq make-backup-files nil)
   #+end_src

** update buffer

   #+BEGIN_SRC emacs-lisp
     (global-auto-revert-mode)
     ;;(setq auto-revert-verbose nil)
   #+END_SRC

** alias yes-or-no

   avoid typing complete 'yes' and 'no'

   #+begin_src emacs-lisp
     (fset 'yes-or-no-p 'y-or-n-p)
   #+end_src

** recent files

   #+begin_src emacs-lisp
     ;; (recentf-mode nil)
   #+end_src

** package.el

   Add package other sources

   #+BEGIN_SRC emacs-lisp
     (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
   #+END_SRC

   Use =M-x package-refresh-contents= to reload the list of packages
   after adding these for the first time.

* el-get

  [[https://github.com/dimitri/el-get][el-get]] is the package manager, which is similar to *apt-get*.
  It has been while (after =emacs 24=) emacs got its own package
  manager, thinking of switching.

  #+begin_src emacs-lisp
    (add-to-list 'load-path "~/.emacs.d/el-get")
    (require 'el-get)
    (setq el-get-git-shallow-clone 't)
    (el-get 'sync)
  #+end_src

** my packages

   To replicate a package set for another emacs installation is
   explain in el-get [[https://github.com/dimitri/el-get#replicating-a-package-set-on-another-emacs-installation][README]].

   you can list current installed package using.

   #+BEGIN_EXAMPLE
     `(setq my-packages
         ',(mapcar #'el-get-as-symbol
               (el-get-list-package-names-with-status "installed")))
   #+END_EXAMPLE

   Might be wondering why there isn't any package *listed* here, coz I
   have broken down list into parts where its needed, you will see
   =(el-get 'sync '<package-name>)= if its requried before its
   configuration.

* [[https://github.com/rhoit/dot-emacs/blob/master/config/ui.cfg.el][UI/UX]]

  Basic configuration, like window size keybindings

  #+begin_src emacs-lisp
    (load "~/.emacs.d/config/ui.cfg.el")
  #+end_src

  these are kind of strange bindings for beginner and for me too, so
  lets remove it

  #+begin_src emacs-lisp
    (global-unset-key [(control prior)])
    (global-unset-key [(control next)])
  #+end_src

  I find these binding quite handful.

  #+begin_src emacs-lisp
    (el-get 'sync 'fill-column-indicator)
    (require 'fill-column-indicator)
    (global-set-key [M-f4] 'save-buffers-kill-terminal)
    (global-set-key [(control f5)] '(lambda() (interactive)
                                    (load-file "~/.emacs.d/init.el")))
    (global-set-key [f6] '(lambda() (interactive)
                          (toggle-truncate-lines)
                          (fci-mode)))
  #+end_src

** shift-mouse selection

   We don't need *font dialog* options which is binded by default.
   Since, font resize has been binded to =C mouse scroll= does it.

   #+begin_src emacs-lisp
     (global-unset-key [(shift down-mouse-1)])
     (global-set-key [(shift down-mouse-1)] 'mouse-save-then-kill)
   #+end_src

** undo keybinds

   let keep things *simple* :see_no_evil: :hear_no_evil: :speak_no_evil:

   addition to the emacs bindings these few thing must have thing.

   #+begin_src emacs-lisp
     (el-get 'sync 'undo-tree)
     (when window-system
       (require 'undo-tree)
       (global-undo-tree-mode 1)
       (setq undo-tree-visualizer-timestamps t)
       (global-unset-key (kbd "C-/"))
       (defalias 'redo 'undo-tree-redo)
       (global-unset-key (kbd "C-z"))
       (global-set-key (kbd "C-z") 'undo-only)
       (global-set-key (kbd "C-S-z") 'redo))
   #+end_src

** [[https://github.com/rhoit/dot-emacs/blob/master/config/modeline.cfg.el][modeline]]

   #+ATTR_HTML: title="modline-screenshot"
   [[https://github.com/ryuslash/mode-icons][file:https://raw.githubusercontent.com/rhoit/mode-icons/dump/screenshots/screenshot01.png]]

   #+begin_src emacs-lisp
     ;;; mode-icons directly from repo, for experiments
     ;;; https://github.com/ryuslash/mode-icons
     (load-file "~/.emacs.d/00testing/mode-icons/mode-icons.el")
     ;;; DID YOU GOT STUCK ABOVE? COMMENT LINE ABOVE & UNCOMMENT NEXT 2 LINES
     ;; (el-get 'sync 'mode-icons)
     ;; (require 'mode-icons)
     ;; (setq mode-icons-desaturate-inactive nil)
     ;; (setq mode-icons-desaturate-active nil)
     ;; (setq mode-icons-grayscale-transform nil)
     (mode-icons-mode)

     (el-get 'sync 'powerline)
     (require 'powerline)

     ;;; https://github.com/rhoit/powerline-iconic-theme
     ;; (add-to-list 'load-path "~/.emacs.d/00testing/powerline-iconic-theme/")
     (load-file "~/.emacs.d/00testing/powerline-iconic-theme/iconic.el")
     (powerline-iconic-theme)
     ;;; DID YOU GOT STUCK ABOVE? COMMENT 2 LINES ABOVE & UNCOMMENT NEXT LINE
     ;; (powerline-default-theme)
   #+end_src

** [[https://github.com/rhoit/dot-emacs/blob/master/config/tabbar.cfg.el][tabbar]]

   #+ATTR_HTML: title="tabbar-screenshot"
   [[https://github.com/mattfidler/tabbar-ruler.el][file:https://raw.githubusercontent.com/rhoit/tabbar-ruler.el/dump/screenshots/01.png]]

   #+begin_src emacs-lisp
     (el-get 'sync 'tabbar)
     (require 'tabbar)
     (tabbar-mode t)

     ;;; tabbar-ruler directly from repo, for experiments
     ;;; https://github.com/mattfidler/tabbar-ruler.el
     (load-file "~/.emacs.d/00testing/tabbar-ruler/tabbar-ruler.el")
     ;;; DID YOU GOT STUCK ABOVE? COMMENT LINE ABOVE & UNCOMMENT NEXT 2
     ;; (el-get 'sync 'tabbar-ruler)
     ;; (require 'tabbar-ruler)

     (setq tabbar-ruler-style 'firefox)

     (load "~/.emacs.d/config/tabbar.cfg.el")
     (global-set-key [f7] 'tabbar-mode)
   #+end_src

   bind them as modern :lollipop: GUI system.

   #+begin_src emacs-lisp
     (define-key global-map [(control tab)] 'tabbar-forward)
     (define-key global-map [(control next)] 'tabbar-forward)
     (define-key global-map [(control prior)] 'tabbar-backward)
     (define-key global-map (kbd "C-S-<iso-lefttab>") 'tabbar-backward)
   #+end_src

   Binding for the tab groups, some how I use lots of buffers.

   #+begin_src emacs-lisp
     (global-set-key [(control shift prior)] 'tabbar-backward-group)
     (global-set-key [(control shift next)] 'tabbar-forward-group)
   #+end_src
** mini-buffer
*** Interactively Do Things

    ido-mode

    *NOTE*: I prefer helm.

    #+begin_src emacs-lisp
      ;; (ido-mode t)
      ;; (setq ido-enable-prefix nil
      ;;      ido-enable-flex-matching t ;; enable fuzzy matching
      ;;      ido-auto-merge-work-directories-length nil
      ;;      ido-create-new-buffer 'always
      ;;      ido-use-filename-at-point 'guess
      ;;      ido-use-virtual-buffers t
      ;;      ido-handle-duplicate-virtual-buffers 2
      ;;      ido-max-prospects 10)
    #+end_src

*** M-x interface

**** smex

     #+begin_src emacs-lisp
       ;; (el-get 'sync 'smex)
       ;; (require 'smex)
       ;; (smex-initialize)
       ;; (global-set-key (kbd "M-x") 'smex)
     #+end_src

**** helm

     https://github.com/emacs-helm/helm

     #+begin_src emacs-lisp
       (el-get 'sync 'helm)
       (require 'helm)
       (global-set-key (kbd "M-x") 'helm-M-x)
       (global-set-key (kbd "C-x C-f") 'helm-find-files)
       (helm-mode 1)
     #+end_src

** smooth scroll

   Unfortunately emacs :barber: scrolling :barber: is not smooth, its
   *2016* already.

   #+begin_src emacs-lisp
     (el-get 'sync 'smooth-scroll)
     (require 'smooth-scroll)
     (smooth-scroll-mode t)

     (setq linum-delay t)
     (setq redisplay-dont-pause t)
     (setq scroll-conservatively 0) ;; cursor on the middle of the screen
     (setq scroll-up-aggressively 0.01)
     (setq scroll-down-aggressively 0.01)
     (setq auto-window-vscroll nil)

     (setq mouse-wheel-progressive-speed 10)
     (setq mouse-wheel-follow-mouse 't)
   #+end_src

** delete selection mode

   Default behavious of emacs :shit: weird, I wish this was *default*.

   #+begin_src emacs-lisp
     (delete-selection-mode 1)
   #+end_src

** anzu

   Highlight all search matches, most of the text editor does this
   why not emacs. Here is the [[https://raw.githubusercontent.com/syohex/emacs-anzu/master/image/anzu.gif][gify]] from original repo.

   #+begin_src emacs-lisp
     (el-get 'sync 'anzu)
     (require 'anzu)
     (global-anzu-mode +1)
     (global-unset-key (kbd "M-%"))
     (global-unset-key (kbd "C-M-%"))
     (global-set-key (kbd "M-%") 'anzu-query-replace)
     (global-set-key (kbd "C-M-%") 'anzu-query-replace-regexp)
   #+end_src

** [[https://www.emacswiki.org/emacs/SpeedBar][speedbar]]

   I prefer speedbar outside the frame, for without separate frame see
   [[https://www.emacswiki.org/emacs/SrSpeedbar][SrSpeedbar]].

   #+BEGIN_SRC emacs-lisp
     (setq speedbar-show-unknown-files t)
     (global-set-key [f9] 'speedbar)
   #+END_SRC

** [[https://github.com/joodland/bm][bookmark]]

   #+BEGIN_SRC emacs-lisp
     (el-get 'sync 'bm)
     (require 'bm)
     (setq bm-marker 'bm-marker-left)
     (global-set-key (kbd "<left-fringe> <mouse-5>") 'bm-next-mouse)
     (global-set-key (kbd "<left-fringe> <mouse-4>") 'bm-previous-mouse)
     (global-set-key (kbd "<left-fringe> <mouse-1>") 'bm-toggle-mouse)
   #+END_SRC

** [[https://github.com/magnars/multiple-cursors.el][multiple cursor]]

   if [[https://www.sublimetext.com/][sublime]] can have multiple selections, *emacs* can too..

   Here is [[https://youtu.be/jNa3axo40qM][video]] from [[http://emacsrocks.com/][Emacs Rocks!]] about it in [[http://emacsrocks.com/e13.html][ep13]].

   #+begin_src emacs-lisp
     (el-get 'sync 'multiple-cursors)
     (when window-system
       (require 'multiple-cursors)
       (global-set-key (kbd "C-S-<mouse-1>") 'mc/add-cursor-on-click))
   #+end_src

** goto-last-change

   This is the gem feature, this might be true answer to the /sublime
   mini-map/ which is over rated, this is what you need.

   If you aren't using el-get here is the [[https://raw.github.com/emacsmirror/emacswiki.org/master/goto-last-change.el][source]], guessing it its
   avaliable in all major repository by now.

   #+begin_src emacs-lisp
     (el-get 'sync 'goto-chg)
     (require 'goto-chg)
     (global-unset-key (kbd "C-j"))
     (global-set-key (kbd "C-j") 'goto-last-change)
   #+end_src

** switch windows

   It kinda has been stuck in my config for years, just addicted to
   it. Seems like this is by default now.

   #+begin_src emacs-lisp
     ;; (el-get 'sync 'switch-window)
     ;; (require 'switch-window)
     ;; (global-set-key (kbd "C-x o") 'switch-window)
   #+end_src

** [[https://www.emacswiki.org/emacs/LineNumbers][line number]]

   Using ELPA here, this is was hard to get working properly with
   ELPA, load sequence, still don't know how its working now.

   seem =nlinum= has also change a lot, but didn't have time to
   explore.

   #+begin_src emacs-lisp
     (require 'nlinum)
     (setq nlinum-delay t)

     ;; Preset `nlinum-format' for minimum width.
     (defun my-nlinum-mode-hook ()
       (when nlinum-mode
         (setq-local nlinum-format
                     (concat "%" (number-to-string
                                  ;; Guesstimate number of buffer lines.
                                  (ceiling (log (max 1 (/ (buffer-size) 80)) 10)))
                             "d"))))
     (add-hook 'nlinum-mode-hook #'my-nlinum-mode-hook)
     (add-hook 'find-file-hook (lambda () (nlinum-mode 1)))
   #+end_src

** highlight current line

   Uses =shade-color= defined in [[https://github.com/rhoit/dot-emacs/blob/master/config/ui.cfg.el][config/ui.cfg.el]] to compute new
   intensity of given color and alpha value.

   #+BEGIN_SRC emacs-lisp
     (el-get 'sync 'highline)
     (require 'highline)

     (set-face-background 'highline-face (shade-color 09))
     (global-highline-mode 1)

     ;; not using inbuild hl-line-mode i can't seem to figure out changing
     ;; face for shade-color
     ;; (global-hl-line-mode 1)
     ;; (set-face-background 'hl-line "#3e4446")
     ;; (set-face-foreground 'highlight nil)
     ;; (set-face-attribute hl-line-face nil :underline nil)
   #+END_SRC

   even though there is the *highline-mode*, *beacon-mode* is much
   cooler, give a try.

   #+BEGIN_SRC emacs-lisp
     (el-get 'sync 'beacon)
     (require 'beacon)
     (beacon-mode t)

   #+END_SRC

** [[https://github.com/mina86/auto-dim-other-buffers.el][auto-dim-other-buffer]]

   package is only avaliable in MELPA

   #+BEGIN_SRC emacs-lisp
     (when window-system
       (require 'auto-dim-other-buffers)
       (auto-dim-other-buffers-mode t))
   #+END_SRC

** [[https://github.com/iqbalansari/emacs-emojify][emoji]]

   People have emotions and so do *emacs* 😂.

   Currently running into problem with this, will fixit later. :'(

   #+begin_src emacs-lisp
     ;; (el-get 'sync 'emojify)
     ;; (require 'emojify)

     ;; (add-hook 'org-mode-hook 'emojify-mode)
     ;; (add-hook 'markdown-mode-hook 'emojify-mode)
     ;; (add-hook 'git-commit-mode-hook 'emojify-mode)
   #+end_src

* programming

  some of the basic things provide by emacs internal packages.

  #+BEGIN_SRC emacs-lisp
    (setq show-paren-style 'expression)
    (show-paren-mode 1)

    (add-hook 'prog-mode-hook 'subword-mode) ;; camelCase is subword
    (add-hook 'prog-mode-hook 'which-function-mode)
    (add-hook 'prog-mode-hook 'toggle-truncate-lines)
  #+END_SRC

** default comment string

   #+BEGIN_SRC emacs-lisp
     (setq-default comment-start "# ")
   #+END_SRC

** watch word

   #+begin_src emacs-lisp
     (defun watch-words ()
       (interactive)
       (font-lock-add-keywords
        nil '(("\\<\\(FIX ?-?\\(ME\\)?\\|TODO\\|BUGS?\\|TIPS?\\|TESTING\\|WARN\\(ING\\)?S?\\|WISH\\|IMP\\|NOTE\\)"
               1 font-lock-warning-face t))))

     (add-hook 'prog-mode-hook 'watch-words)
   #+end_src

** highlight symbol

   #+begin_src emacs-lisp
     (el-get 'sync 'highlight-symbol)
     (require 'highlight-symbol)
     (global-set-key [(control f3)] 'highlight-symbol-at-point)
     (global-set-key [(shift f3)] 'highlight-symbol-next)
     (global-set-key [(shift f2)] 'highlight-symbol-prev)

     (global-unset-key (kbd "<C-down-mouse-1>"))
     (global-set-key (kbd "<C-down-mouse-1>")
                (lambda (event)
                  (interactive "e")
                  (save-excursion
                    (goto-char (posn-point (event-start event)))
                    (highlight-symbol-at-point))))
   #+end_src

** white-spaces terminator

   Just remove all those pesky trailing spaces before saving.

   #+BEGIN_SRC emacs-lisp
     (defun nuke_traling ()
       (add-hook 'write-file-hooks 'delete-trailing-whitespace)
       (add-hook 'before-save-hooks 'whitespace-cleanup))

     (add-hook 'prog-mode-hook 'nuke_traling)
    #+END_SRC

    sometime its still pesky.

    #+BEGIN_SRC emacs-lisp
      (el-get 'sync 'hungry-delete)
      (require 'hungry-delete)
      (add-hook 'prog-mode-hook 'hungry-delete-mode)
    #+END_SRC

** indentation

   Sorry [[http://silicon-valley.wikia.com/wiki/Richard_Hendrix][Richard]] no tabs here!

   #+begin_src emacs-lisp
     (setq-default indent-tabs-mode nil)
     (setq-default tab-width 4)
   #+end_src

** [[https://github.com/rhoit/dot-emacs/blob/master/config/compile.cfg.el][complie]]

   #+begin_src emacs-lisp
     (load "~/.emacs.d/config/compile.cfg.el")
   #+end_src

*** few hooks

    #+begin_src emacs-lisp
      (el-get 'sync 'fill-column-indicator)
      (require 'fill-column-indicator)
      (defun my-compilation-mode-hook ()
        (setq truncate-lines nil) ;; automatically becomes buffer local
        (set (make-local-variable 'truncate-partial-width-windows) nil)
        (toggle-truncate-lines)
        (fci-mode))
      (add-hook 'compilation-mode-hook 'my-compilation-mode-hook)
    #+end_src

*** bindings

    #+begin_src emacs-lisp
      (global-set-key (kbd "C-<f8>") 'save-and-compile-again)
      (global-set-key (kbd "C-<f9>") 'ask-new-compile-command)
      (global-set-key (kbd "<f8>") 'toggle-compilation-buffer)
    #+end_src

** ansi-color

   Need to fix 265-color support, has been such for a long
   time, since we very few work on teminal colors it might
   not be fixed anytime sooner.

   This is what I meant [[https://camo.githubusercontent.com/67e508f03a93d4e9935e38ea201dff7cc32c0afd/68747470733a2f2f7261772e6769746875622e636f6d2f72686f69742f72686f69742e6769746875622e636f6d2f6d61737465722f73637265656e73686f74732f656d6163732d323536636f6c6f722e706e67][screenshot]] was produced using [[https://github.com/bekar/vt100_colors][code]].

   #+begin_src emacs-lisp
     (require 'ansi-color)
     (defun colorize-compilation-buffer ()
       (toggle-read-only)
       (ansi-color-apply-on-region (point-min) (point-max))
       (toggle-read-only))
     (add-hook 'compilation-filter-hook 'colorize-compilation-buffer)
   #+end_src

** highlight indentation

   Was using [[https://github.com/localredhead][localreadhead]] fork of [[https://github.com/antonj/Highlight-Indentation-for-Emacs][highlight indentation]], for *web-mode*
   compatibility. See yasnippet issue [[https://github.com/capitaomorte/yasnippet/issues/396][#396]], but not its merge into the main repo
   using the main repo now!

   other color: "#aaeeba"

   #+begin_src emacs-lisp
     (el-get 'sync 'highlight-indentation)
     (require 'highlight-indentation)
     (set-face-background 'highlight-indentation-face "olive drab")
     (set-face-background 'highlight-indentation-current-column-face "#c3b3b3")

     (add-hook 'prog-mode-hook 'highlight-indentation-mode)
     (add-hook 'prog-mode-hook 'highlight-indentation-current-column-mode)
   #+end_src

** rainbow delimiters

   #+begin_src emacs-lisp
     (el-get 'sync 'rainbow-delimiters)
     (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
   #+end_src

** magit

   its amazing but magit and yes its magic!

   #+begin_src emacs-lisp
     (el-get 'sync 'magit)
   #+end_src

*** magithub

    yet to be tested

    #+begin_src emacs-lisp
      ;;(el-get 'sync 'magitub)
    #+end_src

** ggtags

   code navigation, its disable because it make my emacs super slow.

   https://github.com/leoliu/ggtags

   install ggtags as mention in the repo

   #+begin_src emacs-lisp
     ;; (add-hook 'c-mode-common-hook
     ;;          (lambda ()
     ;;            (when (derived-mode-p 'c-mode 'c++-mode 'java-mode)
     ;;              (ggtags-mode 1))))

     ;; (add-hook 'python-mode-hook 'ggtags-mode)

     ;; (global-set-key (kbd "<C-double-mouse-1>") 'ggtags-find-tag-mouse)
   #+end_src

* [[http://orgmode.org/org.html][org-mode]]

  This might be one of the most important modes of emacs which make
  the emacs distinct from every other editor. You should definately
  checkout org-mode. Like the emacs config it has become humongous.

** keyboard

   removing the C-j bind for goto-last-change

   #+begin_src emacs-lisp
     (add-hook 'org-mode-hook
         '(lambda ()
            (define-key org-mode-map (kbd "C-j") nil)))
   #+end_src

** enable mouse

   #+begin_src emacs-lisp
     (require 'org-mouse)
   #+end_src

** auto-fill text

   currently having problem with this see [[https://github.com/syl20bnr/spacemacs/issues/5697][spacemacs]] issue.

   #+begin_src emacs-lisp
     ;; (add-hook 'org-mode-hook 'turn-on-auto-fill)
   #+end_src

** babel

   active Babel languages

   #+begin_src emacs-lisp
     (setq org-export-use-babel nil)
     (org-babel-do-load-languages 'org-babel-load-languages
        '((sh . t)
         (python . t)))
   #+end_src

** default applications

   Its most :disappointed: disappointing when application opens
   doesn't open in your favorite application, but org-mode has it
   covered :sob:.

   #+begin_src emacs-lisp
     (add-hook 'org-mode-hook
               '(lambda ()
                  (setq org-file-apps
                        '((auto-mode . emacs)
                          ("\\.jpg\\'" . "eog %s")
                          ("\\.png\\'" . "eog %s")
                          ("\\.gif\\'" . "eog %s")
                          ("\\.mkv\\'" . "mplayer %s")
                          ("\\.mp4\\'" . "vlc %s")
                          ("\\.webm\\'" . "mplayer %s")
                          ("\\.pdf\\'" . "evince %s")))))
   #+end_src

** minor-mode

   *org-mode* can be addictive, someone have missed a lot and created
   these awesome modes. Now we can use them minor-modes too inside
   comments.

   *outline*

   #+begin_src emacs-lisp
     (require 'outline)
     (add-hook 'prog-mode-hook 'outline-minor-mode)
     (add-hook 'compilation-mode-hook 'outline-minor-mode)
   #+end_src

   *outshine*

   #+begin_src emacs-lisp
     (el-get 'sync 'outshine)
     (require 'outshine)
     (add-hook 'outline-minor-mode-hook 'outshine-hook-function)
   #+end_src

* modes
** C/C++

   http://www.gnu.org/software/emacs/manual/html_mono/ccmode.html

   #+begin_src emacs-lisp
     (setq c-tab-always-indent t)
     (setq c-basic-offset 4)
     (setq c-indent-level 4)
   #+end_src

   styling

   https://www.emacswiki.org/emacs/IndentingC

   #+begin_src emacs-lisp
     (require 'cc-mode)
     (c-set-offset 'substatement-open 0)
     (c-set-offset 'arglist-intro '+)
     (add-hook 'c-mode-common-hook '(lambda() (c-toggle-hungry-state 1)))
     (define-key c-mode-base-map (kbd "RET") 'newline-and-indent)
   #+end_src

** python

   Welcome to flying circus :circus_tent:.

   #+begin_src emacs-lisp
     (setq-default py-indent-offset 4)
   #+end_src


*** [[http://tkf.github.io/emacs-jedi/][jedi]]

   #+begin_src emacs-lisp
     (el-get 'sync 'jedi)
     (autoload 'jedi:setup "jedi" nil t)
     (add-hook 'python-mode-hook 'jedi:setup)
     (setq jedi:complete-on-dot t) ; optional
     ;; (setq jedi:setup-keys t) ; optional
   #+end_src

*** python-info-look

    shortcut "[C-h S]"

    #+begin_src emacs-lisp
      ;; (add-to-list 'load-path "~/.emacs.d/pydoc-info")
      ;; (require 'pydoc-info)
      ;; (require 'info-look)
    #+end_src

*** pdb

    #+begin_src emacs-lisp
      ;; (setq pdb-path '/usr/lib/python2.4/pdb.py
      ;; gud-pdb-command-name (symbol-name pdb-path))

      ;; (defadvice pdb (before gud-query-cmdline activate) "Provide a
      ;; better default command line when called interactively."
      ;; (interactive (list (gud-query-cmdline pdb-path
      ;; (file-name-nondirectory buffer-file-name)))))
   #+end_src

*** [[https://github.com/rhoit/py-exec][py execution]]

    ess-style executing /python/ script.

    #+begin_src emacs-lisp
      (add-to-list 'load-path "~/.emacs.d/00testing/py-exec/")
      (require 'py-exec)
      (add-hook 'python-mode-hook
           (lambda () (local-set-key (kbd "<C-return>") 'py-execution)))
    #+end_src

** lua

   #+begin_src emacs-lisp
     (setq lua-indent-level 4)
   #+end_src

** kotlin

   #+begin_src emacs-lisp
     (setq default-tab-width 4)
   #+end_src

** web

   #+BEGIN_SRC emacs-lisp
     (el-get 'sync 'web-mode)
     (add-to-list 'auto-mode-alist '("\\.html?\\'"   . web-mode))
     (add-to-list 'auto-mode-alist '("\\.djhtml?\\'" . web-mode))
     (add-to-list 'auto-mode-alist '("\\.js$"        . web-mode))
     (add-to-list 'auto-mode-alist '("\\.css$"       . web-mode))

     (setq web-mode-enable-block-face t)
     (setq web-mode-enable-current-column-highlight t)

     ;; ya-snippet completion for web-mode
     (add-hook 'web-mode-hook #'(lambda () (yas-activate-extra-mode 'html-mode)))
   #+END_SRC

** eww/xwidget

   eww "Emacs Web Wowser" is a web browser written entirely in
   elisp avaliable since version 24.4

   As much awesome it sounds you will be ridiculed if you try to show
   of to normal users! :stuck_out_tongue_winking_eye:

   As of version 25.1 *webkit* has been introduced although you have
   enable it while compiling, it pretty :cool: feature too
   have :sunglasses:.

   config is based on [[https://www.reddit.com/r/emacs/comments/4srze9/watching_youtube_inside_emacs_25/][reddit]] post.

   make these keys behave like normal browser

   #+begin_src emacs-lisp
     (add-hook 'xwidget-webkit-mode (lambda ()
       (define-key xwidget-webkit-mode-map [mouse-4] 'xwidget-webkit-scroll-down)
       (define-key xwidget-webkit-mode-map [mouse-5] 'xwidget-webkit-scroll-up)
       (define-key xwidget-webkit-mode-map (kbd "<up>") 'xwidget-webkit-scroll-down)
       (define-key xwidget-webkit-mode-map (kbd "<down>") 'xwidget-webkit-scroll-up)
       (define-key xwidget-webkit-mode-map (kbd "M-w") 'xwidget-webkit-copy-selection-as-kill)
       (define-key xwidget-webkit-mode-map (kbd "C-c") 'xwidget-webkit-copy-selection-as-kill)))
   #+end_src

   Adapt webkit according to window configuration chagne automatically
   without this hook, every time you change your window configuration,
   you must press =a= to adapt webkit content to new window size.

   #+begin_src emacs-lisp
     (add-hook 'window-configuration-change-hook (lambda ()
                    (when (equal major-mode 'xwidget-webkit-mode)
                      (xwidget-webkit-adjust-size-dispatch))))
   #+end_src

   by default, xwidget reuses previous xwidget window, thus overriding
   your current website, unless a prefix argument is supplied. This
   function always opens a new website in a new window

   #+begin_src emacs-lisp
     (defun xwidget-browse-url-no-reuse (url &optional sessoin)
       (interactive (progn
                      (require 'browse-url)
                      (browse-url-interactive-arg "xwidget-webkit URL: ")))
       (xwidget-webkit-browse-url url t))
   #+end_src

   make xwidget default browser

   #+begin_src emacs-lisp
     ;; (setq browse-url-browser-function (lambda (url session)
     ;;                    (other-window 1)
     ;;                    (xwidget-browse-url-no-reuse url)))
   #+end_src

** dockerfile

   Goodies for :whale: :whale: :whale:

   #+begin_src emacs-lisp
     (el-get 'sync 'dockerfile-mode)
     (add-to-list 'auto-mode-alist '("Dockerfile" . dockerfile-mode))
   #+end_src

** json

   #+begin_src emacs-lisp
     (setq auto-mode-alist
        (cons '("\.json$" . json-mode) auto-mode-alist))
   #+end_src

** markdown

   #+begin_src emacs-lisp
     (el-get 'sync 'markdown-mode)
     ;; disable because markdown creating problem to dockerfile-mode
     ;; (add-to-list 'auto-mode-alist '("\.md" . markdown-mode))
   #+end_src

** yasnippet

   #+begin_src emacs-lisp
     (el-get 'sync 'yasnippet)
     (when window-system
       (require 'yasnippet)
       (yas-reload-all)
       (add-hook 'prog-mode-hook 'yas-minor-mode-on)
       (add-hook 'org-mode-hook 'yas-minor-mode-on))
   #+end_src

* [[https://github.com/rhoit/dot-emacs/blob/master/scripts/wordplay.el][word play]]

  Word play consist of collection of nify scripts.

  #+begin_src emacs-lisp
    (load "~/.emacs.d/scripts/wordplay.el")
  #+end_src

** duplicate lines/words

   #+begin_src emacs-lisp
     (global-set-key (kbd "C-`") 'duplicate-current-line)
     (global-set-key (kbd "C-~") 'duplicate-current-word)
   #+end_src

** on point line copy

   only enable for =C-<insert>=

   #+begin_src emacs-lisp
     (global-set-key (kbd "C-<insert>") 'kill-ring-save-current-line)
   #+end_src

** [[http://www.emacswiki.org/emacs/SortWords][sort words]]

** popup kill ring

   kill :skull: ring :ring:

   Only enable for =Shift + <insert>=

   #+begin_src emacs-lisp
     (el-get 'sync 'popup-kill-ring)
     (setq repetitive_yank_region_point 0) ;; 0 doesn't exist min is 1
     (require 'popup-kill-ring)
     (global-set-key [(shift insert)] 'repetitive-yanking)
   #+end_src

* testing

  This :construction: section :construction: contain modes (plug-in)
  which modified to *extreme* or :bug: *buggy*. May still not be
  *available* in =el-get=.

  #+begin_src emacs-lisp
    (add-to-list 'load-path "~/.emacs.d/00testing/")
  #+end_src

** browser-refresh

   There are stuff like [[http://www.emacswiki.org/emacs/MozRepl][moz-repl]], [[https://github.com/skeeto/skewer-mode][skewer-mode]], [[https://github.com/skeeto/impatient-mode][impatient-mode]] but
   nothing beats good old way with *xdotool* hail *X11* for now! :joy:

   lets do Makefile!

   #+BEGIN_EXAMPLE
     WINDOW=$(shell xdotool search --onlyvisible --class chromium)
     run:
     	xdotool key --window ${WINDOW} 'F5'
    	xdotool windowactivate ${WINDOW}
   #+END_EXAMPLE

** auto-complete: [[https://github.com/syohex/emacs-ac-emoji][emoji]]

   can't remember your emoji? this is the thing you need

   *Note*: if you are using  company mode use [[https://github.com/dunn/company-emoji][company-emoji]]
   requires [[https://zhm.github.io/symbola/][Symbola]] font, to be installed.

   #+begin_src emacs-lisp
     ;; (add-to-list 'load-path "~/.emacs.d/00testing/emacs-ac-emoji/")
     ;; (require 'ac-emoji)

     ;; (add-hook 'org-mode-hook 'auto-complete-mode)
     ;; (add-hook 'org-mode-hook 'ac-emoji-setup)
     ;; (add-hook 'markdown-mode-hook 'ac-emoji-setup)
     ;; (add-hook 'git-commit-mode-hook 'ac-emoji-setup)

     ;; (set-fontset-font
     ;;   t 'symbol
     ;;     (font-spec :family "Symbola") nil 'prepend)
   #+end_src

** window numbering

   also avalible in *el-get*.

   #+begin_src emacs-lisp
     ;; (add-to-list 'load-path "~/.emacs.d/00testing/window-numbering/")
     ;; (require 'window-numbering)
     ;; (window-numbering-mode)
   #+end_src

** hideshowvis mode

   http://www.emacswiki.org/emacs/download/hideshowvis.el

   #+begin_src emacs-lisp
     ;; (autoload 'hideshowvis-enable "hideshowvis")
     ;; (autoload 'hideshowvis-minor-mode
     ;;  "hideshowvis"
     ;;  "Will indicate regions foldable with hideshow in the fringe."
     ;;  'interactive)

     ;; (add-hook 'python-mode-hook 'hideshowvis-enable)
   #+end_src

** isend-mode

   #+begin_src emacs-lisp
     ;; (add-to-list 'load-path "~/.emacs.d/00testing/isend-mode/")
     ;; (require 'isend)
   #+end_src

** LFG mode

   #+begin_src emacs-lisp
     ;; (setq xle-buffer-process-coding-system 'utf-8)
     ;; (load-library "/opt/xle/emacs/lfg-mode")
   #+end_src

* __meta__

  # Local Variables:
  # buffer-read-only: t
  # eval: (server-force-delete)
  # End:
