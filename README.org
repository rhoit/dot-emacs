#+TITLE: emacs diaries
#+DATE: Sunday, Jan 17 2016
#+DESCRIPTION: my emacs config diaries!
#+AUTHOR: rho
#+OPTIONS: num:t
#+STARTUP: overview

*BEWARE:* AUTHOR does'nt know much *elisp* and suffer from
*parenthesiophobia*, but couldn't stop tinker around.


* Intro

  I've been using /emacs/ since *2012*, It has been the love and hate
  story since day one, In summary *emacs rocks but rocks are not so
  pretty*, and here you are looking at not so *pretty* side.

  #+BEGIN_EXAMPLE
    FYI "emacs vanilla is a lie"
  #+END_EXAMPLE

  It began with *single-file* =~/.emacs= with some random snippets.
  Didn't took long to become monster, CHAOTIC MONSTER. It loved to
  *cherry-picked* plugin from different gardens (/not only git/) you
  guessed it, why don't you *apt-get* so I thought.

  Manually maintaining of was hard job, had too freeze them just
  because it newer one didn't work. And came =package.el=, which I
  noticed in [[https://www.gnu.org/software/emacs/manual/html_node/efaq/New-in-Emacs-24.html][What's new in emacs24]] using *emacs25*. [[https://www.emacswiki.org/emacs/el-get][el-get]] was there,
  an now =package.el= was official too. I can't seem to [[https://github.com/dimitri/el-get/issues/1468][choose]] one,
  and great can use both.

  Yet, I could barely remember *Why I removed that package, what
  happen?*, *git-whatchanged* would have told me more if it was a
  *code*. To =org= organize was most sane thing till now
  [[https://github.com/rhoit/dot-emacs/blob/master/init.el][~/emacs.d/init.el]] was orgified.

  #+ATTR_HTML: title="screenshot"
  [[https://www.google.com][file:https://raw.githubusercontent.com/rhoit/dot-emacs/dump/screenshot/screenshot02.png]]

** getting it

   *DISCLAIMER:* :monkey: MAKE SURE YOU HAVE THE BACKUP :warning:
   AUTHOR will _not_ be _responsible_ for the :fire: _harm_ :fire:
   cause by using this config :bangbang:

   oh! you wanna get my config! its super duper +easy+! may be in
   future I'm still +trying+ avoiding things just trying to get my
   work done, so may not work out of the box.

   #+BEGIN_EXAMPLE
     $ git clone https://github.com/rhoit/dot-emacs /path/to/dot-emacs
   #+END_EXAMPLE

** why this config?

   There is absolutely no reason to use with this config, it would be
   like first time :swimmer: swimmer, who mostly likely drown with an
   unnecessary amount of effort. Although I'm great at underwater so
   to say some what athletic underachievers. Working is overrated, but
   learning isn't. May be it started for maintances and note keeping,
   now its more of rants taking over the code! :sunglasses:

** how to build

   =configure= :construction_worker: , pulls down the [[https://github.com/dimitri/el-get][el-get]], and
   magical stuffs.

   #+BEGIN_SRC bash
     $ ./configure
     $ make
     $ make install
   #+END_SRC

   what about other system's, best of luck don't forget to ping me if
   you did it!

** structure

   This is the way do keep my things!

   #+BEGIN_EXAMPLE
     dot-emacs
     ├── el-get                 # pacman
     ├── config                 # config subsection
     │   ├── compile.cfg.el
     :   :
     │   └── tabbar.cfg.el
     ├── ...
     :
     ├── 00testing              # testing stuffs
     └── snippets               # yasnippet stuffs
         ├── fundamental-mode
         :
         └── python-mode
   #+END_EXAMPLE

* emacs core
** garbage collector

   based on [[https://www.reddit.com/r/emacs/comments/3kqt6e/2_easy_little_known_steps_to_speed_up_emacs_start/][reddit]] post.

   I hoped this works but, haven't seen much difference, but if chrome
   just eats entire 4 GB of RAM :rage1: for no reason why not emacs,
   FYI your java based IDE will just eat up more than *200 Mb* to
   start.

   #+BEGIN_SRC emacs-lisp
     (setq gc-cons-threshold (* 100 1024 1024))
   #+END_SRC

** benchmarking

   install benchmark-init from el-get and put below code top of your
   config.

   #+BEGIN_SRC emacs-lisp
     ;;(let ((benchmark-init.el "~/.emacs.d/el-get/benchmark-init/benchmark-init.el"))
     ;; (when (file-exists-p benchmark-init.el)
     ;;    (load benchmark-init.el)))
   #+END_SRC

   then once your emacs started, run:

   =M-x benchmark-init/show-durations-tree=

   To check your package load time do
   #+BEGIN_EXAMPLE
     M-x emacs-init-time
   #+END_EXAMPLE

** emacs server

   Stop :no_entry_sign: opening *emacs* for each file. Set default open
   application using =emacsclient -n -a=emacs [FILE]=.

   #+begin_src emacs-lisp
     (require 'server)
     (unless (server-running-p)
       (server-start))
   #+end_src

** encoding

   #+begin_src emacs-lisp
     (setq locale-coding-system 'utf-8)
     (set-language-environment 'utf-8)
     (set-terminal-coding-system 'utf-8)
     (set-keyboard-coding-system 'utf-8)
     (set-selection-coding-system 'utf-8)
     (prefer-coding-system 'utf-8)
   #+end_src

** backup

   #+begin_src emacs-lisp
     (setq backup-directory-alist (quote ((".*" . "~/.cache/emacs_backup/"))))
     (setq make-backup-files nil)
   #+end_src

** update buffer

   #+BEGIN_SRC emacs-lisp
     (global-auto-revert-mode)
     ;;(setq auto-revert-verbose nil)
   #+END_SRC

** alias yes-or-no

   avoid typing complete 'yes' and 'no'

   #+begin_src emacs-lisp
     (fset 'yes-or-no-p 'y-or-n-p)
   #+end_src

** who writes ~10k lines in single file?

   Warn when opening files bigger than 1 MiB. yup emacs kitchen sink
   can open image, pdf but seriously? in emacs...

   #+BEGIN_SRC emacs-lisp
     (setq large-file-warning-threshold 1048576)
   #+END_SRC

   You might wonder why that random number!

   | kilobyte (kB)  | 1000 bytes     |
   | [[https://en.wikipedia.org/wiki/Kibibyte][kibibyte]] (KiB) | 1024 bytes, kB |

   Since digital systems worked in binary, shouldn't the defacto be
   base of 2, Still interface don't show *kibi*, *mebi*, *gibi*. I
   don't think I'm only one who feel cheated getting HDD of *1 TB* and
   you getting *0.931* TB.

** recent files

   #+BEGIN_SRC emacs-lisp
     ;; (recentf-mode nil)
   #+END_SRC

** package.el

   Add package other sources

   #+BEGIN_SRC emacs-lisp
     (require 'package) ;; after 24 its pre-loaded
     (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
     (package-initialize)
   #+END_SRC

   Use =M-x package-refresh-contents= to reload the list of packages
   after adding these for the first time.

   *<2018-03-01>* finally got the setting right, had been refreshing
   it on every install.

* el-get

  [[https://github.com/dimitri/el-get][el-get]] is the package manager, which is similar to *apt-get*.
  It has been while (after =emacs 24=) emacs got its own package
  manager, thinking of switching.

  #+begin_src emacs-lisp
    (add-to-list 'load-path "~/.emacs.d/el-get")
    (require 'el-get)
    (setq el-get-git-shallow-clone 't)
    (el-get 'sync)
  #+end_src

** my packages

   To replicate a package set for another emacs installation is
   explain in el-get [[https://github.com/dimitri/el-get#replicating-a-package-set-on-another-emacs-installation][README]].

   you can list current installed package using.

   #+BEGIN_EXAMPLE
     `(setq my-packages
         ',(mapcar #'el-get-as-symbol
               (el-get-list-package-names-with-status "installed")))
   #+END_EXAMPLE

   Might be wondering why there isn't any package *listed* here, coz I
   have broken down list into parts where its needed, you will see
   =(el-get 'sync '<package-name>)= if its required before its
   configuration.

* [[https://github.com/rhoit/dot-emacs/blob/master/config/ui.cfg.el][UI/UX]]

  As of today, most people who use *vi* or *emacs* are [[https://github.com/fuqcool/atom-emacs-mode#deprecated][incapable]] of
  using the other editor without using curse words :rage1:. Not
  suprizinly normal people without prior knowledge any text editor are
  pretty comfortable even *windows* notepad make much more sense than
  *emacs* or *vi*. Yes you can pretty much do any *text foo* with
  these editor, even without touching :mouse2: pointing device, but
  really does it really need to be like this.

  Fundamentally *emacs* is more over a scratchpad for *elisp*, which
  has been mistaken for the editor. Just 30+ years focussed on editing
  features accumulation with barely any attention to GUI, I'm baffled
  when people come up with config full keybinding, and for each mode
  they add another. And mode to manage those binding. I'm one of those
  who can't remember all those fancy keyboard *kungfu*.  And why do
  they generalize everyone uses same key layout and so call most
  efficient *vi* binding, just locks me inside without the exit door!

  #+BEGIN_SRC emacs-lisp
    (load "~/.emacs.d/config/ui.cfg.el")
  #+END_SRC

** window

   #+BEGIN_HTML
     GNU Emacs has built-in support for fullscreen since version
     24.4. New commands <code>toggle-frame-fullscreen</code> and
     <code>toggle-frame-maximized</code>, bound to <kbd>F11</kbd> and
     <kbd>M</kbd>-<kbd>f10</kbd>, respectively. But most window
     manager in <b>linux</b> toggle's windows fullscreen with
     <kbd>M</kbd>-<kbd>f11</kbd>.
   #+END_HTML

   #+BEGIN_SRC emacs-lisp
     ;; lets reserve it for something i.e realgud
     (global-unset-key [f11])

     ;;; Window Size
     ;;(add-to-list 'default-frame-alist '(height . 39))
     ;;(add-to-list 'default-frame-alist '(width . 104))
   #+END_SRC

   Its kinda distracting having toolbar, menu bar around, so lets hide
   it and also set some handy key to toggle it.

   #+BEGIN_SRC emacs-lisp
     (tool-bar-mode 0)
     (menu-bar-mode 0)
     (scroll-bar-mode 0)

     (defun toggle-bars-view()
       (interactive)
       (if tool-bar-mode (tool-bar-mode 0) (tool-bar-mode 1))
       (if menu-bar-mode (menu-bar-mode 0) (menu-bar-mode 1)))
     (global-set-key [f12] 'toggle-bars-view)
   #+END_SRC

** sane key bindings

   Although most of the *emacs* key binding are sill relevent till
   this day. I can not stop to appreciation the *thought* and *design*
   went on building it. But recent times things have escalated quickly
   especially in laptop constantly changing the key layouts and All
   thanks to *fn* key now there is one more meta key to offset.

   It seem more of "think +different+ stupid" and other shouting
   *stupidity is cool!*. And even seasoned *vi* users can't seems to
   escape from it ever, well done mac!

   #+BEGIN_VERSE
     there is the *power* button near to backspace,
     forcing you to type correctly or *power off* the machine!
   #+END_VERSE

   Not to mention missing *del* key, but some of them have decided del
   should also do *backspace* although emacs its [[https://www.gnu.org/software/emacs/manual/html_node/emacs/DEL-Does-Not-Delete.html][confused]] and need our
   help!

   #+BEGIN_SRC emacs-lisp
     ;;; you might not need this
     (normal-erase-is-backspace-mode 1)
   #+END_SRC

   Beginners find *Ctrl+v* jump outlandish and sometime also for me.

   #+BEGIN_SRC emacs-lisp
     (global-set-key [(control v)] 'yank)

     ;;; since, C-x k <return> too much acrobat
     (global-set-key [(control d)] 'kill-buffer) ;; same as terminal

     (global-set-key [M-f4] 'save-buffers-kill-terminal)
   #+END_SRC

   I find these binding quite handful.

   #+BEGIN_SRC emacs-lisp
     (el-get 'sync 'fill-column-indicator)
     (require 'fill-column-indicator)

     (global-set-key (kbd "<f5>") 'redraw-display)
     (global-set-key [(control f5)] '(lambda() (interactive)
                                     (load-file "~/.emacs.d/init.el")))
     (global-set-key [f6] '(lambda() (interactive)
                           (toggle-truncate-lines)
                           (fci-mode)))
   #+END_SRC

** undotree

   *simply* :see_no_evil: :hear_no_evil: :speak_no_evil: addition to
   the emacs bindings these few thing must have thing.

   #+begin_src emacs-lisp
     (el-get 'sync 'undo-tree)
     (when window-system
       (require 'undo-tree)
       (global-undo-tree-mode 1)
       (setq undo-tree-visualizer-timestamps t)
       (global-unset-key (kbd "C-/"))
       (defalias 'redo 'undo-tree-redo)
       (global-unset-key (kbd "C-z"))
       (global-set-key (kbd "C-z") 'undo-only)
       (global-set-key (kbd "C-S-z") 'redo))
   #+end_src

** text selection

   Some of the default behavious of emacs :shit: weird, text selection
   is on of them, some time its the *WOW* moment and other time its
   *WTF*.

*** replace selected text

    This is weird one when you expect selected text to be replaced,
    you end up in mess, thankfully there is the inbuild mode to fix
    this.

    #+BEGIN_SRC emacs-lisp
      (delete-selection-mode 1)
    #+END_SRC

*** changing font

    Hotkey for *font dialog* is kinda absurd, that to for changing
    font-face, although for resize has :mouse2: *Ctrl* *mouse-scroll*
    might be sensible option.

    In the effort of not being weird *Shift* *mouse-primary-click* is
    used in region/text selection =mouse-save-then-kill=.

    #+BEGIN_SRC emacs-lisp
      (global-unset-key [(shift down-mouse-1)])
      (global-set-key [(shift down-mouse-1)] 'mouse-save-then-kill)
    #+END_SRC

    *so called wow moments*

    as you think selecting selection, emacs binds the selection
    keyboard free, when followed by *mouse-secondary-click*.

*** [[https://github.com/magnars/expand-region.el][expand region]]

    Expand region increases the selected region by semantic
    units.

    Here is [[https://www.youtube.com/watch?v=_RvHz3vJ3kA][video]] from [[http://emacsrocks.com/][Emacs Rocks!]] about it in [[http://emacsrocks.com/e09.html][ep09]].

    #+BEGIN_SRC emacs-lisp
      (el-get 'sync 'expand-region)
      (require 'expand-region)

      (global-set-key (kbd "C-S-SPC") 'er/expand-region)
      (global-set-key (kbd "C-SPC") '(lambda()
          "set-mark when nothing is selected"
          (interactive)
          (if (use-region-p)
              (er/contract-region 1)
              (call-interactively 'set-mark-command))))
    #+END_SRC

** drag-stuff

   Its undeniable fact after using *org-mode* nothing is same, I have
   always wanted to move section up and down in my code too,
   *outline-mode* came close to parts, but setting comment header for
   each section is bit impractical just for dragging.

   After seeing [[https://github.com/prtx][@prtx]] using sublime, moving lines up and down, similar
   to word transpose *M-t* in emacs, I also want to same, made my mind
   to go though the hell once more to write the =elisp= again until i
   was saved by [[https://github.com/rejeep/drag-stuff.el][drag-stuff]].

   *<M-right/left>* bind seems redundant with *<C-right/left>* also it
   doesn't work in terminal, replacing it hopefull will not create any
   problem.

   *BEWARE*: it breaks the *org-mode* don't enable it in org!

   #+BEGIN_SRC emacs-lisp
     (el-get 'sync 'drag-stuff)
     (require 'drag-stuff)
     (drag-stuff-define-keys)
     (add-hook 'prog-mode-hook 'drag-stuff-mode)
   #+END_SRC

** smooth scroll

   Unfortunately emacs :barber: scrolling :barber: is not smooth.

   #+BEGIN_SRC emacs-lisp
     (el-get 'sync 'smooth-scroll)
     (require 'smooth-scroll)
     (smooth-scroll-mode t)

     (setq scroll-conservatively 0) ;; cursor on the middle of the screen
     (setq scroll-up-aggressively 0.01)
     (setq scroll-down-aggressively 0.01)
     (setq auto-window-vscroll nil)

     (setq mouse-wheel-progressive-speed 10)
     (setq mouse-wheel-follow-mouse 't)
   #+END_SRC

** line-number

   Choosing differnt [[https://www.emacswiki.org/emacs/LineNumbers][line number]] plugins over 5 years, [[https://github.com/thefrontside/frontmacs/blob/master/frontmacs-windowing.el][frontmacs]]
   config actually got it right on that looks great, but *linum* give
   lots of flicker, now experimenting with *nlinum*.

   #+BEGIN_SRC emacs-lisp
     (require 'nlinum)

     (setq nlinum-delay t)
     (setq nlinum-highlight-current-line t)
     (setq nlinum-format " %3d ")

     (add-hook 'prog-mode-hook 'nlinum-mode)
     (add-hook 'org-mode-hook 'nlinum-mode)
   #+END_SRC

** inital screen

   #+BEGIN_SRC emacs-lisp
     (setq inhibit-startup-message t
       ;; initial-major-mode 'fundamental-mode
       inhibit-splash-screen t)
   #+END_SRC

** [[https://github.com/rhoit/dot-emacs/blob/master/config/modeline.cfg.el][modeline]]

   #+ATTR_HTML: title="modline-screenshot"
   [[https://github.com/ryuslash/mode-icons][file:https://raw.githubusercontent.com/rhoit/mode-icons/dump/screenshots/screenshot01.png]]

   #+begin_src emacs-lisp
     ;;; mode-icons directly from repo, for experiments
     ;;; https://github.com/ryuslash/mode-icons
     (load-file "~/.emacs.d/00testing/mode-icons/mode-icons.el")
     ;;; DID YOU GOT STUCK ABOVE? COMMENT LINE ABOVE & UNCOMMENT NEXT 2 LINES
     ;; (el-get 'sync 'mode-icons)
     ;; (require 'mode-icons)
     ;; (setq mode-icons-desaturate-inactive nil)
     ;; (setq mode-icons-desaturate-active nil)
     ;; (setq mode-icons-grayscale-transform nil)
     (mode-icons-mode)

     (el-get 'sync 'powerline)
     (require 'powerline)

     ;;; https://github.com/rhoit/powerline-iconic-theme
     ;; (add-to-list 'load-path "~/.emacs.d/00testing/powerline-iconic-theme/")
     (load-file "~/.emacs.d/00testing/powerline-iconic-theme/iconic.el")
     (powerline-iconic-theme)
     ;;; DID YOU GOT STUCK ABOVE? COMMENT 2 LINES ABOVE & UNCOMMENT NEXT LINE
     ;; (powerline-default-theme)
   #+end_src

** [[https://github.com/rhoit/dot-emacs/blob/master/config/tabbar.cfg.el][tabbar]]

   Something from modern :lollipop: GUI system.

   #+ATTR_HTML: title="tabbar-screenshot"
   [[https://github.com/mattfidler/tabbar-ruler.el][file:https://raw.githubusercontent.com/rhoit/tabbar-ruler.el/dump/screenshots/01.png]]

   #+BEGIN_SRC emacs-lisp
     (el-get 'sync 'tabbar)
     (require 'tabbar)
     (tabbar-mode t)

     ;;; tabbar-ruler directly from repo, for experiments
     ;;; https://github.com/mattfidler/tabbar-ruler.el
     (load-file "~/.emacs.d/00testing/tabbar-ruler/tabbar-ruler.el")
     ;;; DID YOU GOT STUCK ABOVE? COMMENT LINE ABOVE & UNCOMMENT NEXT 2
     ;; (el-get 'sync 'tabbar-ruler)
     ;; (require 'tabbar-ruler)

     (setq tabbar-ruler-style 'firefox)

     (load "~/.emacs.d/config/tabbar.cfg.el")
     (global-set-key [f7] 'tabbar-mode)
     (define-key global-map (kbd "<header-line> <mouse-3>") 'mouse-buffer-menu)

     ;; unbind <C-mouse-1>
     (global-unset-key (kbd "<C-down-mouse-1>"))
   #+END_SRC

   #+BEGIN_HTML
     <code>scroll-right</code> and <code>scroll-right</code> seems to
     be strange for beginner and for me too, if you don't belive me
     try <kbd>Ctrl</kbd>-<kbd>PgUp</kbd> and
     <kbd>Ctrl</kbd>-<kbd>PgUp</kbd> in vanilla <b>emacs</b>, put it
     to the good use <code>tab-forward</code> and
     <code>tab-backword</code>
   #+END_HTML

   #+BEGIN_SRC emacs-lisp
     (global-unset-key [(control prior)]) ;; default is set-to scroll-right
     (global-unset-key [(control next)])  ;; default is set-to scroll-left

     (define-key global-map [(control next)] 'tabbar-forward)
     (define-key global-map [(control prior)] 'tabbar-backward)
   #+END_SRC

   Binding for the tab groups, some how I use lots of buffers.

   #+BEGIN_SRC emacs-lisp
     (global-set-key [(control shift prior)] 'tabbar-backward-group)
     (global-set-key [(control shift next)] 'tabbar-forward-group)
   #+END_SRC

** mini-buffer

   Although [[https://github.com/emacs-helm/helm][helm]] has coffer full with features, I havn't gone beyond
   the minibuffer. It took me while to get hang of helm, one of
   reasons might be constant flikering creation of helm temporary
   popup windows which I don't like.

   #+BEGIN_SRC emacs-lisp
     (el-get 'sync 'helm)
     (require 'helm)
     (global-set-key (kbd "M-x") 'helm-M-x)
     (global-set-key (kbd "C-x C-f") 'helm-find-files)

     ;; terminal like tabs selection
     (define-key helm-map (kbd "<tab>") 'helm-next-line)
     (define-key helm-map (kbd "<backtab>") 'helm-previous-line)

     ;; show command details
     (define-key helm-map (kbd "<right>") 'helm-execute-persistent-action)
     (define-key helm-map (kbd "<left>") 'helm-execute-persistent-action)
   #+END_SRC

** search

   *anzu* Highlight all search matches, most of the text editor does this
   why not emacs. Here is the [[https://raw.githubusercontent.com/syohex/emacs-anzu/master/image/anzu.gif][gify]] from original repo.

   #+begin_src emacs-lisp
     (el-get 'sync 'anzu)
     (require 'anzu)
     (global-anzu-mode +1)
     (global-unset-key (kbd "M-%"))
     (global-unset-key (kbd "C-M-%"))
     (global-set-key (kbd "M-%") 'anzu-query-replace)
     (global-set-key (kbd "C-M-%") 'anzu-query-replace-regexp)
   #+end_src

** [[https://www.emacswiki.org/emacs/SpeedBar][speedbar]]

   I prefer speedbar outside the frame, for without separate frame see
   [[https://www.emacswiki.org/emacs/SrSpeedbar][SrSpeedbar]].

   #+BEGIN_SRC emacs-lisp
     (setq speedbar-show-unknown-files t)
     (global-set-key [f9] 'speedbar)
   #+END_SRC

** [[https://github.com/joodland/bm][bookmark]]

   It has never been so much easy to bookmark!

   #+BEGIN_SRC emacs-lisp
     (el-get 'sync 'bm)
     (require 'bm)
     (setq bm-marker 'bm-marker-left)
     (global-set-key (kbd "<left-fringe> S-<mouse-1>") 'bm-toggle-mouse)
     (global-set-key (kbd "S-<mouse-5>") 'bm-next-mouse)
     (global-set-key (kbd "S-<mouse-4>") 'bm-previous-mouse)
   #+END_SRC

** cursor

   [[https://github.com/Malabarba/beacon][beacon-mode]] gives extra feedback of cursor's position on big
   movement. It can be understood better with this [[https://raw.githubusercontent.com/Malabarba/beacon/master/example-beacon.gif][gify]] from original
   repo.

   #+BEGIN_SRC emacs-lisp
     (el-get 'sync 'beacon)
     (require 'beacon)
     (beacon-mode t)
     (setq beacon-blink-delay '0.2)
     (setq beacon-blink-when-focused 't)
     (setq beacon-dont-blink-commands 'nil)
     (setq beacon-push-mark '1)
   #+END_SRC

*** [[https://github.com/magnars/multiple-cursors.el][multiple cursor]]

    if [[https://www.sublimetext.com/][sublime]] can have multiple selections, *emacs* can too..

    Here is [[https://youtu.be/jNa3axo40qM][video]] from [[http://emacsrocks.com/][Emacs Rocks!]] about it in [[http://emacsrocks.com/e13.html][ep13]].

    #+begin_src emacs-lisp
      (el-get 'sync 'multiple-cursors)
      (when window-system
        (require 'multiple-cursors)
        (global-set-key (kbd "C-S-<mouse-1>") 'mc/add-cursor-on-click)

        (global-set-key (kbd "C-S-<mouse-4>") 'mc/mark-previous-like-this)
        (global-set-key (kbd "C-S-<mouse-5>") 'mc/mark-next-like-this)
        (global-set-key (kbd "C-S-<mouse-2>") 'mc/mark-all-like-this))
    #+end_src

** goto-last-change

   This is the gem feature, this might be true answer to the /sublime
   mini-map/ which is over rated, this is what you need.

   If you aren't using el-get here is the [[https://raw.github.com/emacsmirror/emacswiki.org/master/goto-last-change.el][source]], guessing it its
   avaliable in all major repository by now.

   #+begin_src emacs-lisp
     (el-get 'sync 'goto-chg)
     (require 'goto-chg)
     (global-unset-key (kbd "C-j"))
     (global-set-key (kbd "C-j") 'goto-last-change)
   #+end_src

** switch windows

   It kinda has been stuck in my config for years, just addicted to
   it. Seems like this is by default now.

   #+begin_src emacs-lisp
     ;; (el-get 'sync 'switch-window)
     ;; (require 'switch-window)
     ;; (global-set-key (kbd "C-x o") 'switch-window)
   #+end_src

** [[https://github.com/mina86/auto-dim-other-buffers.el][auto-dim-other-buffer]]

   package is only avaliable in MELPA

   #+BEGIN_SRC emacs-lisp
     (when window-system
       (require 'auto-dim-other-buffers)
       (auto-dim-other-buffers-mode t))
   #+END_SRC

** [[https://github.com/iqbalansari/emacs-emojify][emoji]]

   People have emotions and so do *emacs* 😂.

   Currently running into problem with this, will fixit later. :'(

   #+begin_src emacs-lisp
     ;; (el-get 'sync 'emojify)
     ;; (require 'emojify)

     ;; (add-hook 'org-mode-hook 'emojify-mode)
     ;; (add-hook 'markdown-mode-hook 'emojify-mode)
     ;; (add-hook 'git-commit-mode-hook 'emojify-mode)
   #+end_src

* programming

  some of the basic things provide by emacs internal packages.

  #+BEGIN_SRC emacs-lisp
    (add-hook 'prog-mode-hook 'subword-mode) ;; camelCase is subword
    (add-hook 'prog-mode-hook 'which-function-mode)
    (add-hook 'prog-mode-hook 'toggle-truncate-lines)

    ;; default comment string
    (setq-default comment-start "# ")
  #+END_SRC

** match parenthesis

   #+BEGIN_SRC emacs-lisp
    (setq show-paren-style 'expression)
    ;; (setq show-paren-match '((t (:inverse-video t)))) ;; this is not working using custom set face
    (show-paren-mode 1)
   #+END_SRC

** watch word

   #+begin_src emacs-lisp
     (defun watch-words ()
       (interactive)
       (font-lock-add-keywords
        nil '(("\\<\\(FIX ?-?\\(ME\\)?\\|TODO\\|BUGS?\\|TIPS?\\|TESTING\\|WARN\\(ING\\)?S?\\|WISH\\|IMP\\|NOTE\\)"
               1 font-lock-warning-face t))))

     (add-hook 'prog-mode-hook 'watch-words)
   #+end_src

*** [[https://github.com/nschum/highlight-symbol.el][highlight symbol]]

    #+BEGIN_SRC emacs-lisp
      (defun highlight-symbol-my-binds ()
        (interactive)
        (el-get 'sync 'highlight-symbol)
        (require 'highlight-symbol)
        (local-set-key [(control f3)] 'highlight-symbol-at-point)
        (local-set-key [(shift f3)] 'highlight-symbol-next)
        (local-set-key [(shift f2)] 'highlight-symbol-prev)

        ;; by default its just for if tabbar config didn't run
        (local-unset-key (kbd "<C-down-mouse-1>"))

        (local-set-key (kbd "<C-down-mouse-1>") (lambda (event)
          (interactive "e")
          (save-excursion
            (goto-char (posn-point (event-start event)))
            (highlight-symbol-at-point)))))

      (add-hook 'prog-mode-hook 'highlight-symbol-my-binds)
    #+END_SRC

** indentation

   Sorry [[http://silicon-valley.wikia.com/wiki/Richard_Hendrix][Richard]] no tabs here!

   #+BEGIN_SRC emacs-lisp
     (setq-default indent-tabs-mode nil)
     (setq-default tab-width 4)
     (setq tab-width 4)
   #+END_SRC

*** [[https://github.com/DarthFennec/highlight-indent-guides][highlight-indent-guides]]

    This a new comer, and the it has got better with time, although I
    hate default fill method.

    #+BEGIN_SRC emacs-lisp
      (el-get 'sync 'highlight-indentation-guides)
      (require 'highlight-indent-guides)

      (setq highlight-indent-guides-method 'character)
      (add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
      (setq highlight-indent-guides-character ?\┊)
    #+END_SRC

*** highlight-indentation

    *NOTE*: currently not using it

    Was using [[https://github.com/localredhead][localreadhead]] fork of [[https://github.com/antonj/Highlight-Indentation-for-Emacs][highlight indentation]], for *web-mode*
    compatibility. See yasnippet issue [[https://github.com/capitaomorte/yasnippet/issues/396][#396]], but not its merge into the main repo
    using the main repo now!

    other color: "#aaeeba"

    #+BEGIN_SRC emacs-lisp
      ;; (el-get 'sync 'highlight-indentation)
      ;; (require 'highlight-indentation)
      ;; (set-face-background 'highlight-indentation-face "olive drab")
      ;; (set-face-background 'highlight-indentation-current-column-face "#c3b3b3")

      ;; (add-hook 'prog-mode-hook 'highlight-indentation-mode)
      ;; (add-hook 'prog-mode-hook 'highlight-indentation-current-column-mode)
    #+END_SRC

** white-spaces

   If you have working with non-emacs people sooner or later you might
   face this problem, those pesky trailing spaces/tabs new lines at
   *EOF*!

   #+BEGIN_EXAMPLE
     Phenomenal Cosmic Powers! Itty Bitty trailing spaces!
   #+END_EXAMPLE

   Seriously what kinda all crappy IDE's comming out.

   #+BEGIN_SRC emacs-lisp
     (defun nuke_trailing ()
       (add-hook 'write-file-hooks 'delete-trailing-whitespace)
       (add-hook 'before-save-hooks 'whitespace-cleanup))

     (add-hook 'prog-mode-hook 'nuke_trailing)
   #+END_SRC

   [[https://github.com/nflath/hungry-delete][hungry-delete]] mode is intresting but still its quirky, mapping it
   to default *delete/backspace* will result typing your needed
   whitespaces back again! So as the mode its *NO, NO*. Manually
   toggling the mode just to delete few continous white spaces. Naah!

    #+BEGIN_SRC emacs-lisp
      (el-get 'sync 'hungry-delete)
      (require 'hungry-delete)
      (global-set-key (kbd "S-<backspace>") 'hungry-delete-backward)
    #+END_SRC

   There is the intresting outlook of [[https://github.com/hrehfeld/emacs-smart-hungry-delete/issues][smart-hungry-delete]] which has'nt
   yet made to *MELPA* stable.

   #+BEGIN_SRC emacs-lisp
    (require 'smart-hungry-delete)
    (smart-hungry-delete-add-default-hooks)
    (global-set-key (kbd "<backspace>") 'smart-hungry-delete-backward-char)
    (global-set-key (kbd "<delete>") 'smart-hungry-delete-forward-char)
   #+END_SRC

   Of course emacs can add newline at *End Of File* just to make sure
   *git* doesn't go crazy! for unchanged files. But don't enable it
   let fancy IDE people wonder how to remove newline at EOF.

   #+BEGIN_SRC emacs-lisp
     ;; (setq require-final-newline t)
   #+END_SRC

** [[https://github.com/rhoit/dot-emacs/blob/master/config/compile.cfg.el][complie]]

   #+begin_src emacs-lisp
     (load "~/.emacs.d/config/compile.cfg.el")
   #+end_src

*** few hooks

    #+begin_src emacs-lisp
      (el-get 'sync 'fill-column-indicator)
      (require 'fill-column-indicator)
      (defun my-compilation-mode-hook ()
        (setq truncate-lines nil) ;; automatically becomes buffer local
        (set (make-local-variable 'truncate-partial-width-windows) nil)
        (toggle-truncate-lines)
        (fci-mode))
      (add-hook 'compilation-mode-hook 'my-compilation-mode-hook)
    #+end_src

*** bindings

    #+begin_src emacs-lisp
      (global-set-key (kbd "C-<f8>") 'save-and-compile-again)
      (global-set-key (kbd "C-<f9>") 'ask-new-compile-command)
      (global-set-key (kbd "<f8>") 'toggle-compilation-buffer)
    #+end_src

** ansi-color

   Need to fix 265-color support, has been such for a long
   time, since we very few work on teminal colors it might
   not be fixed anytime sooner.

   This is what I meant [[https://camo.githubusercontent.com/67e508f03a93d4e9935e38ea201dff7cc32c0afd/68747470733a2f2f7261772e6769746875622e636f6d2f72686f69742f72686f69742e6769746875622e636f6d2f6d61737465722f73637265656e73686f74732f656d6163732d323536636f6c6f722e706e67][screenshot]] was produced using [[https://github.com/bekar/vt100_colors][code]].

   #+begin_src emacs-lisp
     (require 'ansi-color)
     (defun colorize-compilation-buffer ()
       (read-only-mode)
       (ansi-color-apply-on-region (point-min) (point-max))
       (read-only-mode))
     (add-hook 'compilation-filter-hook 'colorize-compilation-buffer)
   #+end_src

** rainbow delimiters

   #+begin_src emacs-lisp
     (el-get 'sync 'rainbow-delimiters)
     (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
   #+end_src

** magit

   its amazing but magit and yes its magic!

   #+begin_src emacs-lisp
     (el-get 'sync 'magit)
   #+end_src

*** magithub

    yet to be tested, feeling lazy since caught with gitlab addiction.

    #+begin_src emacs-lisp
      ;;(el-get 'sync 'magitub)
    #+end_src

** ggtags

   https://superuser.com/questions/579847/is-there-emacs-plugins-to-do-sublime-like-completion-and-goto-anything

   code navigation, its disable because it make my emacs super slow.

   https://github.com/leoliu/ggtags

   install ggtags as mention in the repo

   #+begin_src emacs-lisp
     ;; (add-hook 'c-mode-common-hook
     ;;          (lambda ()
     ;;            (when (derived-mode-p 'c-mode 'c++-mode 'java-mode)
     ;;              (ggtags-mode 1))))

     ;; (add-hook 'python-mode-hook 'ggtags-mode)

     ;; (global-set-key (kbd "<C-double-mouse-1>") 'ggtags-find-tag-mouse)
   #+end_src

** [[https://github.com/bbatsov/projectile][projectile]]

   #+BEGIN_HTML
     If your source consist of hundreds of line then don't be like me
     use projectile mode.

     ya <kbd>C</kbd>-<kbd>S</kbd>-<kbd>p</kbd> for select line
     previous, just get along with it, have you tried it in
     <b>chrome</b>, <b>sublime</b>, <b>vscode</b>?

     and don't forget the <code>helm-projectile</code>.
   #+END_HTML

   #+BEGIN_SRC emacs-lisp
     (add-hook 'projectile-mode-hook
         (lambda()
             (helm-projectile-on)
             (global-set-key (kbd "C-S-p") 'helm-projectile-find-file)))
   #+END_SRC

** debugger

   Although I barely use *debugger*, lets say I'm more of =print()=
   person, may be because I work much with =python= than
   =C=. Nevertheless, a good IDE should have debugger, but emacs is
   +TextEditor+ OS, and ships with *Grand Unified Debugger* (GUD), its
   faily usable with terrible defaults and not to mention with more
   key bindings.

   #+BEGIN_SRC emacs-lisp
     ;; unlike gdb, pdb is a inbuilt python module
     (setq gud-pdb-command-name "python -m pdb")
   #+END_SRC

   GUD is great but [[https://github.com/realgud/realgud/][realgud]] much better, although you will miss
   *gdb-multiple-windows* but it does'nt work with *pdb* to begin
   with. If you ask why realgud here is some intresting [[https://github.com/realgud/realgud/blob/09431a4561921bece36a6083b6e27ac4dc82432d/realgud.el#L36-L47][rant]] from its
   developer.

   #+BEGIN_SRC emacs-lisp
     (setq realgud:pdb-command-name "python -m pdb")
   #+END_SRC

* [[http://orgmode.org/org.html][org-mode]]

  This might be one of the most important modes of emacs which make
  the emacs distinct from every other editor. You should definately
  checkout *org-mode*. Like the emacs config it has out grown.

  removing pesky keybinds for consistancy.

  #+BEGIN_SRC emacs-lisp
    (add-hook 'org-mode-hook
        '(lambda ()
           (define-key org-mode-map (kbd "C-j") nil) ;; used for goto-last-change
           (define-key org-mode-map (kbd "S-<up>") nil) ;; text selection
           (define-key org-mode-map (kbd "S-<down>") nil) ;; text selection
           (define-key org-mode-map (kbd "S-<left>") nil) ;; text selection
           (define-key org-mode-map (kbd "S-<right>") nil) ;; text selection
           ))
  #+END_SRC

** enable mouse

   #+begin_src emacs-lisp
     (require 'org-mouse)
   #+end_src

** auto-fill text

   currently having problem with *emacs 26* have reverted to *25* with
   this see [[https://github.com/syl20bnr/spacemacs/issues/5697][spacemacs]] issue.

   #+BEGIN_SRC emacs-lisp
     (add-hook 'org-mode-hook 'turn-on-auto-fill)
   #+END_SRC

** babel

   active Babel languages

   *NOTE*: running in to problem recently sh is now shell, or will
   cause =ob-sh= not found *error*.

   *NOTE*: Currently babel code execution doesn't work, haven't found
   the work around yet, so downgraded emacs from *26* -> *25*,
   couldn't track what was the last working snapshot.

   *<2018-05-30>*: 26 is official again *sh* should be *shell*
   *<2018-01-04>*: seems like its *sh* again haven't fully tested

   #+BEGIN_SRC emacs-lisp
     (setq org-export-use-babel nil)
     (org-babel-do-load-languages 'org-babel-load-languages
        '((shell . t)
         (python . t)))
   #+END_SRC

** default applications

   Its most :disappointed: disappointing when application opens
   doesn't open in your favorite application, but org-mode has it
   covered :sob:.

   #+begin_src emacs-lisp
     (add-hook 'org-mode-hook
               '(lambda ()
                  (setq org-file-apps
                        '((auto-mode . emacs)
                          ("\\.jpg\\'" . "eog %s")
                          ("\\.png\\'" . "eog %s")
                          ("\\.gif\\'" . "eog %s")
                          ("\\.mkv\\'" . "mplayer %s")
                          ("\\.mp4\\'" . "vlc %s")
                          ("\\.webm\\'" . "mplayer %s")
                          ("\\.pdf\\'" . "evince %s")))))
   #+end_src

** minor-mode

   *org-mode* can be addictive, someone have missed a lot and created
   these awesome modes. Now we can use them minor-modes too inside
   comments.

   org's *outline* with [[https://github.com/alphapapa/outshine][outshine]] extention.

   #+BEGIN_SRC emacs-lisp
     (el-get 'sync 'outshine)
     (require 'outshine)

     (add-hook 'prog-mode-hook 'outline-minor-mode)
     (add-hook 'compilation-mode-hook 'outline-minor-mode)

     (add-hook 'outline-minor-mode-hook 'outshine-hook-function)
     (add-hook 'outline-minor-mode-hook '(lambda()
         (global-unset-key (kbd "<M-right>"))
         (local-set-key (kbd "<M-right>") 'outline-promote)
         (global-unset-key (kbd "<M-left>"))
         (local-set-key (kbd "<M-left>") 'outline-demote)
         (local-set-key (kbd "C-<iso-lefttab>") 'outshine-cycle-buffer)))
   #+END_SRC

* modes
** C/C++

   http://www.gnu.org/software/emacs/manual/html_mono/ccmode.html

   #+BEGIN_SRC emacs-lisp
     (setq c-tab-always-indent t)
     (setq c-basic-offset 4)
     (setq c-indent-level 4)
     (setq gdb-many-windows t)
     (setq gdb-show-main t)
   #+END_SRC

   styling

   https://www.emacswiki.org/emacs/IndentingC

   #+BEGIN_SRC emacs-lisp
     (require 'cc-mode)
     (c-set-offset 'substatement-open 0)
     (c-set-offset 'arglist-intro '+)
     (add-hook 'c-mode-common-hook '(lambda() (c-toggle-hungry-state 1)))
     (define-key c-mode-base-map (kbd "RET") 'newline-and-indent)
   #+END_SRC

** python

   Welcome to flying circus :circus_tent:.

   #+BEGIN_SRC emacs-lisp
     (setq-default py-indent-offset 4)
     (add-hook 'python-mode-hook (
         lambda ()
         (local-set-key (kbd "C-<") 'python-indent-shift-left)
         (local-set-key (kbd "C->") 'python-indent-shift-right)))
   #+END_SRC


*** [[http://tkf.github.io/emacs-jedi/][jedi]]

    Since *python3.3* virtual environment can be created using =python
    -m venv env= making *python-virtualenv* kinda obsolete, but create
    the problem with jedi, will fix it some other day!

    #+BEGIN_SRC emacs-lisp
      ;; (el-get 'sync 'jedi)
      ;; (autoload 'jedi:setup "jedi" nil t)
      ;; (add-hook 'python-mode-hook 'jedi:setup)
      ;; (setq jedi:complete-on-dot t) ; optional
      ;; (setq jedi:environment-virtualenv "python -m venv")

      ;; (setq jedi:setup-keys t) ; optional
    #+END_SRC

*** running at venv

    Yes! we work on *virtual environment (venv)*, and we do love to
    *source* them except some *anaconda* idiots, who can't seems to
    get things strait espcially in *unix* systems.

    In reality venv just switches executable, seriously loading *venv*
    might be sane for *terminal* operation or runnig errands with
    *pip*. but for running just execute directly form
    =./venv/bin/python your.py=.

    Damn don't try to solve artificial problems! so goes for idiotic
    venv modes trying to find *venv* folder.

*** python-info-look

    shortcut "[C-h S]"

    #+begin_src emacs-lisp
      ;; (add-to-list 'load-path "~/.emacs.d/pydoc-info")
      ;; (require 'pydoc-info)
      ;; (require 'info-look)
    #+end_src


*** [[https://github.com/rhoit/py-exec][py execution]]

    ess-style executing /python/ script.

    #+begin_src emacs-lisp
      (add-to-list 'load-path "~/.emacs.d/00testing/py-exec/")
      (require 'py-exec)
      (add-hook 'python-mode-hook
           (lambda () (local-set-key (kbd "<C-return>") 'py-execution)))
    #+end_src

** lua

   #+begin_src emacs-lisp
     (setq lua-indent-level 4)
   #+end_src

** web

   #+BEGIN_SRC emacs-lisp
     (el-get 'sync 'web-mode)
     (add-to-list 'auto-mode-alist '("\\.html?\\'"   . web-mode))
     (add-to-list 'auto-mode-alist '("\\.djhtml?\\'" . web-mode))
     (add-to-list 'auto-mode-alist '("\\.js$"        . web-mode))
     (add-to-list 'auto-mode-alist '("\\.css$"       . web-mode))

     (setq web-mode-enable-block-face t)
     (setq web-mode-enable-current-column-highlight t)

     ;; ya-snippet completion for web-mode
     (add-hook 'web-mode-hook #'(lambda () (yas-activate-extra-mode 'html-mode)))
   #+END_SRC

** eww/xwidget

   eww "Emacs Web Wowser" is a web browser written entirely in
   elisp avaliable since version 24.4

   As much awesome it sounds you will be ridiculed if you try to show
   of to normal users! :stuck_out_tongue_winking_eye:

   As of version 25.1 *webkit* has been introduced although you have
   enable it while compiling, it pretty :cool: feature too
   have :sunglasses:.

   config is based on [[https://www.reddit.com/r/emacs/comments/4srze9/watching_youtube_inside_emacs_25/][reddit]] post.

   make these keys behave like normal browser

   #+BEGIN_SRC emacs-lisp
     ;;(add-hook 'xwidget-webkit-mode (lambda ()
     ;;  (define-key xwidget-webkit-mode-map [mouse-4] 'xwidget-webkit-scroll-down)
     ;;  (define-key xwidget-webkit-mode-map [mouse-5] 'xwidget-webkit-scroll-up)
     ;;  (define-key xwidget-webkit-mode-map (kbd "<up>") 'xwidget-webkit-scroll-down)
     ;;  (define-key xwidget-webkit-mode-map (kbd "<down>") 'xwidget-webkit-scroll-up)
     ;;  (define-key xwidget-webkit-mode-map (kbd "M-w") 'xwidget-webkit-copy-selection-as-kill)
     ;;  (define-key xwidget-webkit-mode-map (kbd "C-c") 'xwidget-webkit-copy-selection-as-kill)))
   #+END_SRC

   Adapt webkit according to window configuration chagne automatically
   without this hook, every time you change your window configuration,
   you must press =a= to adapt webkit content to new window size.

   #+BEGIN_SRC emacs-lisp
     ;; (add-hook 'window-configuration-change-hook (lambda ()
     ;;               (when (equal major-mode 'xwidget-webkit-mode)
     ;;                 (xwidget-webkit-adjust-size-dispatch))))
   #+END_SRC

   by default, xwidget reuses previous xwidget window, thus overriding
   your current website, unless a prefix argument is supplied. This
   function always opens a new website in a new window

   #+BEGIN_SRC emacs-lisp
     ;; (defun xwidget-browse-url-no-reuse (url &optional sessoin)
     ;;  (interactive (progn
     ;;                 (require 'browse-url)
     ;;                 (browse-url-interactive-arg "xwidget-webkit URL: ")))
     ;;  (xwidget-webkit-browse-url url t))
   #+END_SRC

   make xwidget default browser

   #+begin_src emacs-lisp
     ;; (setq browse-url-browser-function (lambda (url session)
     ;;                    (other-window 1)
     ;;                    (xwidget-browse-url-no-reuse url)))
   #+end_src

** dockerfile

   Goodies for :whale: :whale: :whale:

   *<2018-04-30>* dockerfile-mode seem to be missing =s= dependencies

   #+begin_src emacs-lisp
     (el-get 'sync 's)
     (el-get 'sync 'dockerfile-mode)
     (require 'dockerfile-mode)
     (add-to-list 'auto-mode-alist '("Dockerfile" . dockerfile-mode))
   #+end_src

** json

   #+begin_src emacs-lisp
     (setq auto-mode-alist
        (cons '("\.json$" . json-mode) auto-mode-alist))
   #+end_src

** markdown

   #+begin_src emacs-lisp
     (el-get 'sync 'markdown-mode)
     ;; disable because markdown creating problem to dockerfile-mode
     ;; (add-to-list 'auto-mode-alist '("\.md" . markdown-mode))
   #+end_src

** yasnippet

   *<2018-01-04>*: Something is wrong with el-get keeps showing.

   #+BEGIN_EXAMPLE
     Error (el-get): while installing yasnippet: el-get: git el-get could not build yasnippet [git submodule update --init -- snippets]
   #+END_EXAMPLE

   currently using from elpa

   #+begin_src emacs-lisp
     ;;(el-get 'sync 'yasnippet)
     (when window-system
       (require 'yasnippet)
       (yas-reload-all)
       (add-hook 'prog-mode-hook 'yas-minor-mode-on)
       (add-hook 'org-mode-hook 'yas-minor-mode-on))
   #+end_src

* [[https://github.com/rhoit/dot-emacs/blob/master/scripts/wordplay.el][word play]]

  Word play consist of collection of nify scripts.

  #+begin_src emacs-lisp
    (load "~/.emacs.d/scripts/wordplay.el")
  #+end_src

** [[http://emacsredux.com/blog/2013/05/22/smarter-navigation-to-the-beginning-of-a-line/][smarter move to beginning of line]]

   Normally *C-a* will move your cursor to 0th column of the line,
   this snippet takes consideration of the indentation, and for
   default behaviour repeate the action which will toggle between the
   first non-whitespace character and the =bol=.

   #+BEGIN_SRC emacs-lisp
     (global-set-key [remap move-beginning-of-line]
                 'smarter-move-beginning-of-line)
   #+END_SRC

** [[http://ergoemacs.org/emacs/modernization_upcase-word.html][toggle lettercase]]

   By default, you can use M-c to change the case of a character at
   the cursor's position. This also jumps you to the end of the
   word. However it is far more useful to define a new function by
   adding the following code to your emacs config file. Once you have
   done this, M-c will cycle through "all lower case", "Initial
   Capitals", and "ALL CAPS" for the word at the cursor position, or
   the selected text if a region is highlighted.

   #+BEGIN_SRC emacs-lisp
     (global-set-key "\M-c" 'toggle-letter-case)
   #+END_SRC

** duplicate lines/words

   #+begin_src emacs-lisp
     (global-set-key (kbd "C-`") 'duplicate-current-line)
     (global-set-key (kbd "C-~") 'duplicate-current-word)
   #+end_src

** on point line copy

   only enable for =C-<insert>=

   #+begin_src emacs-lisp
     (global-set-key (kbd "C-<insert>") 'kill-ring-save-current-line)
   #+end_src

** [[http://www.emacswiki.org/emacs/SortWords][sort words]]

** popup kill ring

   kill :skull: ring :ring:

   Only enable for =Shift + <insert>=

   #+begin_src emacs-lisp
     (el-get 'sync 'popup-kill-ring)
     (setq repetitive_yank_region_point 0) ;; 0 doesn't exist min is 1
     (require 'popup-kill-ring)
     (global-set-key [(shift insert)] 'repetitive-yanking)
   #+end_src

* testing

  This :construction: section :construction: contain modes (plug-in)
  which modified to *extreme* or :bug: *buggy*. May still not be
  *available* in =el-get=.

  #+begin_src emacs-lisp
    (add-to-list 'load-path "~/.emacs.d/00testing/")
  #+end_src

** browser-refresh

   There are stuff like [[http://www.emacswiki.org/emacs/MozRepl][moz-repl]], [[https://github.com/skeeto/skewer-mode][skewer-mode]], [[https://github.com/skeeto/impatient-mode][impatient-mode]] but
   nothing beats good old way with *xdotool* hail *X11* for now! :joy:

   lets do Makefile!

   #+BEGIN_EXAMPLE
     WINDOW=$(shell xdotool search --onlyvisible --class chromium)
     run:
     	xdotool key --window ${WINDOW} 'F5'
    	xdotool windowactivate ${WINDOW}
   #+END_EXAMPLE

** auto-complete: [[https://github.com/syohex/emacs-ac-emoji][emoji]]

   can't remember your emoji? this is the thing you need

   *Note*: if you are using  company mode use [[https://github.com/dunn/company-emoji][company-emoji]]
   requires [[https://zhm.github.io/symbola/][Symbola]] font, to be installed.

   #+begin_src emacs-lisp
     ;; (add-to-list 'load-path "~/.emacs.d/00testing/emacs-ac-emoji/")
     ;; (require 'ac-emoji)

     ;; (add-hook 'org-mode-hook 'auto-complete-mode)
     ;; (add-hook 'org-mode-hook 'ac-emoji-setup)
     ;; (add-hook 'markdown-mode-hook 'ac-emoji-setup)
     ;; (add-hook 'git-commit-mode-hook 'ac-emoji-setup)

     ;; (set-fontset-font
     ;;   t 'symbol
     ;;     (font-spec :family "Symbola") nil 'prepend)
   #+end_src

** window numbering

   also avalible in *el-get*.

   #+begin_src emacs-lisp
     ;; (add-to-list 'load-path "~/.emacs.d/00testing/window-numbering/")
     ;; (require 'window-numbering)
     ;; (window-numbering-mode)
   #+end_src

** hideshowvis mode

   http://www.emacswiki.org/emacs/download/hideshowvis.el

   #+begin_src emacs-lisp
     ;; (autoload 'hideshowvis-enable "hideshowvis")
     ;; (autoload 'hideshowvis-minor-mode
     ;;  "hideshowvis"
     ;;  "Will indicate regions foldable with hideshow in the fringe."
     ;;  'interactive)

     ;; (add-hook 'python-mode-hook 'hideshowvis-enable)
   #+end_src

** isend-mode

   #+begin_src emacs-lisp
     ;; (add-to-list 'load-path "~/.emacs.d/00testing/isend-mode/")
     ;; (require 'isend)
   #+end_src

** LFG mode

   #+begin_src emacs-lisp
     ;; (setq xle-buffer-process-coding-system 'utf-8)
     ;; (load-library "/opt/xle/emacs/lfg-mode")
   #+end_src

* __meta__

  # Local Variables:
  # buffer-read-only: t
  # eval: (server-force-delete)
  # End:
