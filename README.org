#+TITLE: emacs diaries
#+DATE: Sunday, Jan 17 2016
#+DESCRIPTION: my emacs config diaries!
#+AUTHOR: rho
#+OPTIONS: num:t
#+STARTUP: overview


*BEWARE:* AUTHOR does'nt know much *elisp* and suffer from
*parenthesiophobia*, but couldn't stop tinker around.


* INTRO

  I've been using /emacs/ since *2012*, It has been the love and hate
  story since day one, In summary *emacs rocks but ü™® rocks are not so
  pretty*, and here you are looking at not so *pretty* side.

  #+BEGIN_EXAMPLE
    FYI "emacs vanilla is a lie"
  #+END_EXAMPLE

** about

   Customization began with *single-file* =~/.emacs= with few settings
   and some random *snippets*. Didn't took long to become monster. It
   loved to *cherry-picked* üçí packages literally form anywhere, I was
   like why don't you *apt-get*.

   It was becoming difficult maintaining üì¶ packages manually,
   tracking workable dependencies and freezing üßä versions. And came
   =package.el=, which I noticed in [[https://www.gnu.org/software/emacs/manual/html_node/efaq/New-in-Emacs-24.html][What's new in emacs24]] using
   *emacs25*. also [[https://www.emacswiki.org/emacs/el-get][el-get]] existed, and now =package.el= was official
   too. I can't seem to [[https://github.com/dimitri/el-get/issues/1468][choose]] one, and great can use both.

   Yet, I could barely remember *Why I removed that package, what
   happen?*, *git-whatchanged* would have told me more if it was a
   *code*. To =org= organize was most sane thing till now
   [[https://github.com/rhoit/dot-emacs/blob/master/init.el][~/emacs.d/init.el]] was orgified (org-babel-tangle).

** structure

   #+BEGIN_EXAMPLE
     Entropy is important but not here
   #+END_EXAMPLE

   This is the way, I keep my things have been same for many year now!

   #+BEGIN_EXAMPLE
     dot-emacs
     ‚îú‚îÄ‚îÄ el-get                 # pacman
     ‚îú‚îÄ‚îÄ config                 # config subsection
     ‚îÇ   ‚îú‚îÄ‚îÄ compile.cfg.el
     :   :
     ‚îÇ   ‚îî‚îÄ‚îÄ tabbar.cfg.el
     ‚îú‚îÄ‚îÄ ...
     :
     ‚îú‚îÄ‚îÄ 00testing              # testing stuffs
     ‚îî‚îÄ‚îÄ snippets               # yasnippet stuffs
         ‚îú‚îÄ‚îÄ fundamental-mode
         :
         ‚îî‚îÄ‚îÄ python-mode
   #+END_EXAMPLE

* CORE
** server

   Stop ‚õî opening *emacs* for each file. Set default open application
   to *emacsclient*, or set it manually:

   =emacsclient --no-wait--alternate-editor=emacs [FILE]=

   #+BEGIN_SRC emacs-lisp
     (require 'server)
     (unless (server-running-p)
       (server-start))
   #+END_SRC

** big files

   Warn when opening files bigger than 1 MiB. yup *emacs* kitchen sink
   can open üåá image, PDF but seriously üòµ ?

   #+BEGIN_SRC emacs-lisp
     (setq large-file-warning-threshold (* 1 1024 1024))
   #+END_SRC

   You might wonder why that random number!

   | kilobyte (kB)  | 1000 bytes     |
   | [[https://en.wikipedia.org/wiki/Kibibyte][kibibyte]] (KiB) | 1024 bytes, kB |

   Since digital systems worked in binary, yet *defacto* is in base of
   2, Still interface don't show *kibi*, *mebi*, *gibi*. I don't think
   I'm only one who feel üò† cheated getting HDD of *1 TB* and you
   getting *0.931* TB.

** pacman

   There are many üì¶ package managers for *emacs*, ranging from simple
   scripts to download files from [[https://www.emacswiki.org][EmacsWiki]] to full-featured package
   management solutions like [[https://github.com/raxod502/straight.el][straight.el]], these are few I have used

*** package.el

    Add package other sources

    #+BEGIN_SRC emacs-lisp
      (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
    #+END_SRC

    Use =M-x package-refresh-contents= to reload the list of packages
    after adding these for the first time.

*** el-get

    Its bit tricky to make both *ELPA* and *el-get* work together, but
    after years of procrastination, some how this works, you should
    load *el-get* first, but *emacs24+* loads =package.el= by default,
    thats why put this magic line before loading *el-get* =(setq
    package-enable-at-startup nil)=

    #+HEADER: :results silent
    #+BEGIN_SRC emacs-lisp
      (add-to-list 'load-path "~/.emacs.d/el-get")
      (require 'el-get)
      (setq el-get-git-shallow-clone 't)
      (el-get 'sync)
    #+END_SRC

    To replicate a package set for another emacs installation is
    explain in el-get [[https://github.com/dimitri/el-get#replicating-a-package-set-on-another-emacs-installation][README]].

* UI
** initial-screen

   #+HEADER: :results silent
   #+BEGIN_SRC emacs-lisp
     (setq inhibit-startup-message t)
     (setq inhibit-splash-screen t)
   #+END_SRC

** [[https://www.emacswiki.org/emacs/SpeedBar][speedbar]]

   I prefer speedbar outside the frame, for without separate frame see
   [[https://www.emacswiki.org/emacs/SrSpeedbar][SrSpeedbar]].

   #+HEADER: :results silent
   #+BEGIN_SRC emacs-lisp
     (setq speedbar-show-unknown-files t)
     (global-set-key [f9] 'speedbar)
   #+END_SRC

* UX
** sane-binding
*** buffer-close

    #+BEGIN_SRC emacs-lisp
      ;;; since, C-x k <return> too much acrobat
      (global-set-key [(control d)] 'kill-buffer)  ; same as terminal
    #+END_SRC

** yes-or-no

   yup thing are annoying üò§ here! avoid typing complete 'yes' and
   'no'.

   #+BEGIN_SRC emacs-lisp
     (fset 'yes-or-no-p 'y-or-n-p)
   #+END_SRC

** update-buffer

   A fancy :bowtie: way of saying any change in file (yup not using
   same editor, duh!) will magically üé© appear in editor.

   #+HEADER: :results silent
   #+BEGIN_SRC emacs-lisp
     (global-auto-revert-mode)
     ;;(setq auto-revert-verbose nil)
   #+END_SRC

** undo
*** undo-tree

    #+HEADER: :results silent
    #+BEGIN_SRC emacs-lisp
      (require 'undo-tree)

      (setq undo-tree-visualizer-timestamps t)

      (global-undo-tree-mode 1)
      (global-unset-key (kbd "C-/"))

      (defalias 'redo 'undo-tree-redo)
      (global-unset-key (kbd "C-z"))
      (global-set-key (kbd "C-z") 'undo-only)
      (global-set-key (kbd "C-S-z") 'redo)
    #+END_SRC

** search
*** anzu

    [[https://github.com/syohex/emacs-anzu][anzu]] highlight all search matches, most of the text editor does
    even [[https://github.com/osyo-manga/vim-anzu][vi]] this why not emacs. Here is the [[https://raw.githubusercontent.com/syohex/emacs-anzu/master/image/anzu.gif][gify]] from original
    repository.

    #+HEADER: :results silent
    #+BEGIN_SRC emacs-lisp
      (require 'anzu)

      (global-anzu-mode +1)
      (global-unset-key (kbd "M-%"))
      (global-unset-key (kbd "C-M-%"))
      (global-set-key (kbd "M-%") 'anzu-query-replace)
      (global-set-key (kbd "C-M-%") 'anzu-query-replace-regexp)
    #+END_SRC

** cursor
*** beacon-mode

    [[https://github.com/Malabarba/beacon][beacon]] gives extra feedback of cursor's position on big movement.
    It can be understood better with this [[https://raw.githubusercontent.com/Malabarba/beacon/master/example-beacon.gif][gify]] from original
    repository.

    #+BEGIN_SRC emacs-lisp
      (require 'beacon)

      (setq beacon-blink-delay '0.2)
      (setq beacon-blink-when-focused 't)
      (setq beacon-dont-blink-commands 'nil)
      (setq beacon-push-mark '1)

      (dim-minor-name 'beacon-mode "")
      (beacon-mode t)
    #+END_SRC

*** multiple-cursor

    If [[https://www.sublimetext.com/][sublime]] can have [[https://github.com/magnars/multiple-cursors.el][multiple]] cursor, *emacs* can too.

    Here is üìπ [[https://youtu.be/jNa3axo40qM][video]] from [[http://emacsrocks.com/][Emacs Rocks!]] about it in [[http://emacsrocks.com/e13.html][ep13]].

    #+HEADER: :results silent
    #+BEGIN_SRC emacs-lisp
      (require 'multiple-cursors)
      (global-set-key (kbd "C-S-<mouse-1>") 'mc/add-cursor-on-click)

      (global-set-key (kbd "C-S-<mouse-4>") 'mc/mark-previous-like-this)
      (global-set-key (kbd "C-S-<mouse-5>") 'mc/mark-next-like-this)
      (global-set-key (kbd "C-S-<mouse-2>") 'mc/mark-all-like-this)
    #+END_SRC

** selection

   Some of the default behavior of *emacs* üí© weird, text-selection is
   on of them, some time its the üåà *WOW* ü¶Ñ moment ü•≥ and other time
   its *WTF*.

   #+BEGIN_SRC emacs-lisp
     (delete-selection-mode 1)
   #+END_SRC

*** why-changing-fonts

    Hotkey for *font dialog* is kinda absurd, that to for changing
    font-face, although for resize has *Ctrl* *mouse-scroll* might be
    sensible option.

    In the effort of not being weird *Shift* *mouse-primary-click* is
    used in region/text selection =mouse-save-then-kill=.

    #+BEGIN_SRC emacs-lisp
      (global-unset-key [(shift down-mouse-1)])  ; unbind (mouse-apperance-menu EVENT)
      (global-set-key [(shift down-mouse-1)] 'mouse-save-then-kill)
    #+END_SRC

    *so called wow moments*

    as you think selecting selection, emacs binds the selection
    keyboard free, when followed by *mouse-secondary-click* if its not
    in conflict.

*** [[https://github.com/magnars/expand-region.el][expand region]]

    Expand region increases the selected region by semantic units.

    Here is [[https://www.youtube.com/watch?v=_RvHz3vJ3kA][video]] from [[http://emacsrocks.com/][Emacs Rocks!]] about it in [[http://emacsrocks.com/e09.html][ep09]].

    #+HEADER: :results silent
    #+BEGIN_SRC emacs-lisp
      (el-get 'sync 'expand-region)
      (require 'expand-region)
      (global-set-key (kbd "S-SPC") 'er/expand-region)
      (global-set-key (kbd "C-S-SPC") 'er/contract-region)
    #+END_SRC

** mini-buffer
*** helm

    Although [[https://github.com/emacs-helm/helm][helm]] features are from the another league, I have not
    gone beyond the minibuffer. It took me while to get hang of it,
    one of reasons might be constant flickering creation of helm
    temporary popup windows ü™ü which I don't like.

    #+HEADER: :results silent
    #+BEGIN_SRC emacs-lisp
      (require 'helm)
      (global-set-key (kbd "M-x") 'helm-M-x)
      (global-set-key (kbd "C-x C-f") 'helm-find-files)

      ;;; terminal like tabs selection
      (define-key helm-map (kbd "<tab>") 'helm-next-line)
      (define-key helm-map (kbd "<backtab>") 'helm-previous-line)

      ;;; show command details
      (define-key helm-map (kbd "<right>") 'helm-execute-persistent-action)
      (define-key helm-map (kbd "<left>") 'helm-execute-persistent-action)
    #+END_SRC

** [[https://github.com/joodland/bm][bookmark]]

   It has never been so much easy to bookmark üîñ!

   #+HEADER: :results silent
   #+BEGIN_SRC emacs-lisp
     (require 'bm)
     (setq bm-marker 'bm-marker-left)

     (global-set-key (kbd "<left-fringe> <mouse-5>") 'bm-next-mouse)
     (global-set-key (kbd "<left-fringe> <mouse-4>") 'bm-previous-mouse)
     (global-set-key (kbd "<left-fringe> <mouse-1>") 'bm-toggle-mouse)
   #+END_SRC

** killing group
*** paste

    Beginners find *Ctrl+v* jump outlandish and sometime also for me.

    #+BEGIN_SRC emacs-lisp
      (global-set-key [(control v)] 'yank)
    #+END_SRC

*** drag

    After using *org-mode* nothing is same, moving the section is one
    of the feature you want to have every where. Although many do have
    feature to drag a lines or the region. [[https://github.com/rejeep/drag-stuff.el][drag-stuff]] is great but its
    default binding is conflicts with *org-mode*.

    #+BEGIN_SRC emacs-lisp
      (require 'drag-stuff)

      (drag-stuff-define-keys)
    #+END_SRC

* PROGRAMMING

  some of the basic things provide by *emacs* internal packages.

  #+BEGIN_SRC emacs-lisp
    (add-hook 'prog-mode-hook 'subword-mode)  ; camelCase is subword
    (add-hook 'prog-mode-hook 'which-function-mode)
    (add-hook 'prog-mode-hook 'toggle-truncate-lines)
  #+END_SRC

** parenthesis

   #+BEGIN_SRC emacs-lisp
     (setq show-paren-style 'expression)
     ;; (setq show-paren-match '((t (:inverse-video t)))) ;; this is not working using custom set face
     (show-paren-mode 1)
   #+END_SRC

*** rainbow-delimiters

    This üåà mode is barely noticeable at first glance but, if you live
    by parenthesis it nice thing to have around.

    #+BEGIN_SRC emacs-lisp
      (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
    #+END_SRC

** comments

   #+BEGIN_SRC emacs-lisp
     (setq-default comment-start "# ")
   #+END_SRC

** watch-word

   #+BEGIN_SRC emacs-lisp
     (defun watch-words ()
       (interactive)
       (font-lock-add-keywords
        nil '(("\\<\\(FIX ?-?\\(ME\\)?\\|TODO\\|BUGS?\\|TIPS?\\|TESTING\\|WARN\\(ING\\)?S?\\|WISH\\|IMP\\|NOTE\\)"
               1 font-lock-warning-face t))))

     (add-hook 'prog-mode-hook 'watch-words)
   #+END_SRC

** indentation

   Sorry [[http://silicon-valley.wikia.com/wiki/Richard_Hendrix][Richard]] no tabs here!

   #+HEADER: :results silent
   #+BEGIN_SRC emacs-lisp
     (setq-default standard-indent 4)
     (setq-default indent-tabs-mode nil)
     (setq-default tab-width 4)
     (setq tab-width 4)
   #+END_SRC

*** highlight-indent-guides

    After years using [[https://github.com/antonj/Highlight-Indentation-for-Emacs][highlight indentation]] with performance issues
    and shifting through multiple üç¥ fork and patches, I have moved to
    [[https://github.com/DarthFennec/highlight-indent-guides][highlight-indent-guides]] has much better compatibility. Although I
    hate default fill method.

    #+HEADER: :results silent
    #+BEGIN_SRC emacs-lisp
      (setq highlight-indent-guides-method 'character)
      (setq highlight-indent-guides-character ?\‚îä)

      (add-hook
       'prog-mode-hook
       '(lambda()
          (require 'highlight-indent-guides)
          (dim-minor-name 'highlight-indent-guides-mode "")
          (highlight-indent-guides-mode)))
    #+END_SRC

** white-spaces

   #+BEGIN_SRC emacs-lisp
     (defun nuke-trailing ()
       (add-hook 'write-file-hooks 'delete-trailing-whitespace)
       (add-hook 'before-save-hooks 'whitespace-cleanup))

     (add-hook 'prog-mode-hook 'nuke-trailing)
   #+END_SRC

   [[https://github.com/nflath/hungry-delete][hungry-delete]] mode is interesting but still its quirky, mapping it
   to default *delete/backspace* will result typing your needed
   white-spaces back again! So as the mode its *NO*, *NO*. Manually
   toggling the mode just to delete few continous white spaces. Naah!

   #+BEGIN_SRC emacs-lisp
     (require 'hungry-delete)
     (global-set-key (kbd "S-<backspace>") 'hungry-delete-backward)
   #+END_SRC

* WEB
** web-mode

   [[https://web-mode.org/][web-mode]] is an autonomous emacs major-mode for editing web
   templates.

   #+BEGIN_SRC emacs-lisp
     (add-to-list 'auto-mode-alist '("\\.html$'" . web-mode))

     (setq web-mode-enable-block-face t)
     (setq web-mode-enable-current-column-highlight t)

     ;; ya-snippet completion for web-mode
     (add-hook 'web-mode-hook #'(lambda () (yas-activate-extra-mode 'html-mode)))
   #+END_SRC

** browser-refresh

   There are stuff like [[http://www.emacswiki.org/emacs/MozRepl][moz-repl]], [[https://github.com/skeeto/skewer-mode][skewer-mode]], [[https://github.com/skeeto/impatient-mode][impatient-mode]] but
   nothing beats good old way with *xdotool* hail *X11* for now! :joy:

   #+HEADER: :results silent
   #+BEGIN_SRC emacs-lisp :tangle no
     (require 'browser-refresh)
     (setq browser-refresh-default-browser 'firefox)
   #+END_SRC

   above thingi comment, lets do Makefile!

   #+BEGIN_EXAMPLE
     WINDOW=$(shell xdotool search --onlyvisible --class chromium)
     run:
     	xdotool key --window ${WINDOW} 'F5'
    	xdotool windowactivate ${WINDOW}
   #+END_EXAMPLE

* PYTHON

  Welcome to flying circus üé™.

  #+BEGIN_SRC emacs-lisp
    (setq-default py-indent-offset 4)
  #+END_SRC

** jedi

   [[http://tkf.github.io/emacs-jedi/]]

   #+BEGIN_SRC emacs-lisp
     (autoload 'jedi:setup "jedi" nil t)
     (add-hook 'python-mode-hook 'jedi:setup)
     (setq jedi:complete-on-dot t) ; optional
     ;; (setq jedi:setup-keys t) ; optional
   #+END_SRC

** py-exec

   [[https://github.com/rhoit/py-exec][py-exec]] is ess-style execution for /python/ script.

   #+BEGIN_SRC emacs-lisp
     (add-to-list 'load-path "~/.emacs.d/00testing/py-exec/")
     (require 'py-exec)
     (add-hook
      'python-mode-hook
      (lambda() (local-set-key (kbd "<C-return>") 'py-execution)))
   #+END_SRC

* ORG-MODE

  removing the C-j bind for [[goto-last-change]]

  #+BEGIN_SRC emacs-lisp
    (add-hook
     'org-mode-hook
     '(lambda()
        (define-key org-mode-map (kbd "C-j") nil)))
  #+END_SRC

** enable mouse

   #+BEGIN_SRC emacs-lisp
     (add-hook 'org-mode-hook 'lambda() (require 'org-mouse))
   #+END_SRC

** babel

   active Babel languages

   #+BEGIN_SRC emacs-lisp
     (setq org-export-use-babel nil)

     (org-babel-do-load-languages
      'org-babel-load-languages
      '(
        (sh . t)
        (python . t)))
   #+END_SRC

   - <2018-01-04> sh mode

     Currently babel code execution doesn't work, haven't found the
     work around yet, so downgraded emacs from *26* -> *25*, couldn't
     track what was the last working snapshot.

     running in to problem recently sh is now shell, or will cause
     =ob-sh= not found *error*.

** default applications

   Its most üòû disappointing when application opens doesn't open in
   your favorite application, but org-mode has it covered üò≠.

   #+BEGIN_SRC emacs-lisp
     (add-hook
      'org-mode-hook
      '(lambda()
         (setq org-file-apps
               '((auto-mode . emacs)
                 ("\\.jpg\\'" . "eog %s")
                 ("\\.png\\'" . "eog %s")
                 ("\\.gif\\'" . "eog %s")
                 ("\\.mkv\\'" . "mplayer %s")
                 ("\\.mp4\\'" . "vlc %s")
                 ("\\.webm\\'" . "mplayer %s")
                 ("\\.pdf\\'" . "evince %s")))))
   #+END_SRC

** minor-mode

   *org-mode* can be addictive, someone have missed a lot and created
   these awesome modes. Now we can use them minor-modes too inside
   comments.

   org's *outline* with [[https://github.com/alphapapa/outshine][outshine]] extension.

   #+BEGIN_SRC emacs-lisp
     (require 'outshine)

     (add-hook 'prog-mode-hook 'outline-minor-mode)
     (add-hook 'compilation-mode-hook 'outline-minor-mode)

     (add-hook 'outline-minor-mode-hook 'outshine-hook-function)
     (add-hook 'outline-minor-mode-hook '(lambda()
         (global-unset-key (kbd "<M-right>"))
         (local-set-key (kbd "<M-right>") 'outline-promote)
         (global-unset-key (kbd "<M-left>"))
         (local-set-key (kbd "<M-left>") 'outline-demote)
         (local-set-key (kbd "C-<iso-lefttab>") 'outshine-cycle-buffer)))
   #+END_SRC

* MODES
** C/C++

   http://www.gnu.org/software/emacs/manual/html_mono/ccmode.html

   #+BEGIN_SRC emacs-lisp
     (setq c-tab-always-indent t)
     (setq c-basic-offset 4)
     (setq c-indent-level 4)
     (setq gdb-many-windows t)
     (setq gdb-show-main t)
   #+END_SRC

   styling

   https://www.emacswiki.org/emacs/IndentingC

   #+BEGIN_SRC emacs-lisp
     (require 'cc-mode)
     (c-set-offset 'substatement-open 0)
     (c-set-offset 'arglist-intro '+)
     (add-hook 'c-mode-common-hook '(lambda() (c-toggle-hungry-state 1)))
     (define-key c-mode-base-map (kbd "RET") 'newline-and-indent)
   #+END_SRC

** dockerfile

   Goodies for üê≥ üê≥ üê≥

   #+BEGIN_SRC emacs-lisp :tangle no
     (require 'dockerfile-mode)
     (add-to-list 'auto-mode-alist '("Dockerfile" . dockerfile-mode))
   #+END_SRC

** json

   #+BEGIN_SRC emacs-lisp
     (setq auto-mode-alist
        (cons '("\.json$" . json-mode) auto-mode-alist))
   #+END_SRC

** yasnippet

   #+BEGIN_SRC emacs-lisp
     (require 'yasnippet)
     (yas-reload-all)
     (add-hook 'prog-mode-hook 'yas-minor-mode-on)
     (add-hook 'org-mode-hook 'yas-minor-mode-on)
   #+END_SRC

* WORDPLAY

  [[https://github.com/rhoit/dot-emacs/blob/master/scripts/wordplay.el][wordplay]] consist of collection of nifty scripts.

  #+BEGIN_SRC emacs-lisp
    (load "~/.emacs.d/scripts/wordplay.el")
  #+END_SRC

** [[http://emacsredux.com/blog/2013/05/22/smarter-navigation-to-the-beginning-of-a-line/][smarter move to beginning of line]]

   Normally *C-a* will move your cursor to 0th column of the line,
   this snippet takes consideration of the indentation, and for
   default behaviour repeate the action which will toggle between the
   first non-whitespace character and the =bol=.

   #+BEGIN_SRC emacs-lisp
     (global-set-key [remap move-beginning-of-line]
                 'smarter-move-beginning-of-line)
   #+END_SRC

** [[http://ergoemacs.org/emacs/modernization_upcase-word.html][toggle lettercase]]

   By default, you can use M-c to change the case of a character at
   the cursor's position. This also jumps you to the end of the
   word. However it is far more useful to define a new function by
   adding the following code to your emacs config file. Once you have
   done this, M-c will cycle through "all lower case", "Initial
   Capitals", and "ALL CAPS" for the word at the cursor position, or
   the selected text if a region is highlighted.

   #+BEGIN_SRC emacs-lisp
     (global-set-key "\M-c" 'toggle-letter-case)
   #+END_SRC

** duplicate lines/words

   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-`") 'duplicate-current-line)
     (global-set-key (kbd "C-~") 'duplicate-current-word)
   #+END_SRC

** on point line copy

   only enable for =C-<insert>=

   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-<insert>") 'kill-ring-save-current-line)
   #+END_SRC

* TESTING

  This :construction: section :construction: contain modes (plug-in)
  which modified to *extreme* or :bug: *buggy*. May still not be
  *available* in =el-get=.

  #+BEGIN_SRC emacs-lisp
    (add-to-list 'load-path "~/.emacs.d/00testing/")
  #+END_SRC

** ansi-color

   Need to fix 265-color support, has been such for a long
   time, since we very few work on teminal colors it might
   not be fixed anytime sooner.

   This is what I meant [[https://camo.githubusercontent.com/67e508f03a93d4e9935e38ea201dff7cc32c0afd/68747470733a2f2f7261772e6769746875622e636f6d2f72686f69742f72686f69742e6769746875622e636f6d2f6d61737465722f73637265656e73686f74732f656d6163732d323536636f6c6f722e706e67][screenshot]] was produced using [[https://github.com/bekar/vt100_colors][code]].

   #+BEGIN_SRC emacs-lisp
     (require 'ansi-color)
     (defun colorize-compilation-buffer ()
       (read-only-mode)
       (ansi-color-apply-on-region (point-min) (point-max))
       (read-only-mode))
     (add-hook 'compilation-filter-hook 'colorize-compilation-buffer)
   #+END_SRC

** isend-mode

   #+BEGIN_SRC emacs-lisp
     ;; (add-to-list 'load-path "~/.emacs.d/00testing/isend-mode/")
     ;; (require 'isend)
   #+END_SRC

** LFG mode

   #+BEGIN_SRC emacs-lisp
     ;; (setq xle-buffer-process-coding-system 'utf-8)
     ;; (load-library "/opt/xle/emacs/lfg-mode")
   #+END_SRC

* META :noexport:

  # Local Variables:
  # buffer-read-only: t
  # End:
